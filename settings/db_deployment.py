import sqlite3


objects_script = """
CREATE TABLE IF NOT EXISTS VDOTHistory (
VDOTHistoryID INTEGER PRIMARY KEY,
VDOT REAL,
CreatedDate TIMESTAMP DEFAULT (datetime('now','localtime')));

CREATE TABLE IF NOT EXISTS Settings (
Name TEXT,
DateOfBirth TIMESTAMP,
VDOTHistoryID INT,
MaxHR INT,
Units TEXT,
AverageRestingHR INT,
FOREIGN KEY(VDOTHistoryID) REFERENCES VDOTHistory(VDOTHistoryID));

CREATE TABLE IF NOT EXISTS HealthStats (
HealthStatsID INTEGER PRIMARY KEY,
Date TIMESTAMP UNIQUE NOT NULL,
WeightKG REAL,
WeightLB REAL,
RestingHR INT);

CREATE TABLE IF NOT EXISTS Schedule (
ScheduleID INTEGER PRIMARY KEY,
ScheduleName TEXT UNIQUE NOT NULL,
IsCustom INT NOT NULL CHECK (IsCustom IN (0,1)));

CREATE TABLE IF NOT EXISTS Workout (
WorkoutID INTEGER PRIMARY KEY,
Name TEXT UNIQUE NOT NULL,
WorkoutJSON TEXT NOT NULL,
FileName TEXT NULL,
SerialNumber TEXT NULL,
IsCustom INT NOT NULL CHECK(IsCustom IN(0,1)));

CREATE TABLE IF NOT EXISTS ScheduleWorkout (
ScheduleWorkoutID INTEGER PRIMARY KEY,
ScheduleID INT NOT NULL,
WorkoutID INT NULL,
DaysFromEnd INT NOT NULL,
WorkoutWeek INT NOT NULL,
WorkoutWeekDay INT NOT NULL,
RaceDistanceID INT NULL,
FOREIGN KEY(WorkoutID) REFERENCES Workout(WorkoutID),
FOREIGN KEY(ScheduleID) REFERENCES Schedule(ScheduleID),
FOREIGN KEY(RaceDistanceID) REFERENCES Distance(DistanceID));

CREATE TABLE IF NOT EXISTS PlannedSchedule (
PlannedScheduleID INTEGER PRIMARY KEY,
ScheduleID INT NOT NULL,
StartDate TIMESTAMP NOT NULL,
EndDate TIMESTAMP NOT NULL,
FOREIGN KEY(ScheduleID) REFERENCES Schedule(ScheduleID));

CREATE TABLE IF NOT EXISTS SchedulePlan (
SchedulePlanID INTEGER PRIMARY KEY,
PlannedScheduleID INT NOT NULL,
ScheduleWorkoutID INT NOT NULL,
ScheduleDate TIMESTAMP NOT NULL,
RaceDetailID INT NULL,
Completed INT NOT NULL,
FOREIGN KEY(PlannedScheduleID) REFERENCES PlannedSchedule(PlannedScheduleID),
FOREIGN KEY(ScheduleWorkoutID) REFERENCES ScheduleWorkout(ScheduleWorkoutID),
FOREIGN KEY(RaceDetailID) REFERENCES RaceDetail(RaceDetailID));

CREATE TABLE IF NOT EXISTS Shoe (
ShoeID INTEGER PRIMARY KEY,
ShoeName TEXT UNIQUE NOT NULL,
StartDate TIMESTAMP DEFAULT (datetime('now','localtime')),
DateRetired TIMESTAMP,
PreviousMiles REAL
PreviousKM REAL,
IsDefault INT NOT NULL CHECK (IsDefault IN (0,1)));

CREATE TABLE IF NOT EXISTS RunType (
RunTypeID INTEGER PRIMARY KEY,
Name TEXT UNIQUE);

CREATE TABLE IF NOT EXISTS TrainingInterval (
TrainingIntervalID INTEGER PRIMARY KEY,
Name TEXT UNIQUE,
DefaultTarget TEXT,
HRZoneLow INT,
HRZoneHigh INT,
MilePace INT,
KMPace INT);

CREATE TABLE IF NOT EXISTS Distance (
DistanceID INTEGER PRIMARY KEY,
Name TEXT UNIQUE,
PrintName TEXT UNIQUE,
KM REAL,
Miles REAL);

CREATE TABLE IF NOT EXISTS Race (
RaceID INTEGER PRIMARY KEY,
RaceName TEXT UNIQUE,
DistanceID INT,
FOREIGN KEY(DistanceID) REFERENCES Distance(DistanceID));

CREATE TABLE IF NOT EXISTS RaceDetail (
RaceDetailID INTEGER PRIMARY KEY,
RaceID INT,
RaceDate TIMESTAMP,
GoalTime INT,
ActualTime INT,
FOREIGN KEY(RaceID) REFERENCES Race(RaceID));

CREATE TABLE IF NOT EXISTS VDOTRacePace (
RacePaceID INTEGER PRIMARY KEY,
DistanceID INT UNIQUE,
Time INT,
MilePace INT,
KMPace INT,
FOREIGN KEY(DistanceID) REFERENCES Distance(DistanceID));

CREATE TABLE IF NOT EXISTS Diary (
DiaryID INTEGER PRIMARY KEY,
DiaryDate TIMESTAMP NOT NULL,
DiaryTime TIMESTAMP NOT NULL,
RunTypeID INT,
DistanceMiles REAL,
DistanceKM REAL,
SpeedMPH REAL,
SpeedKPH REAL,
PaceMiles INT,
PaceKM INT,
AverageHR INT,
ShoeID INT,
SchedulePlanID INT,
Effort INT,
RunRating INT,
RaceDetailID INT,
IsDeleted INT,
CHECK (IsDeleted IN (0,1)),
CHECK (Effort BETWEEN 1 AND 10),
CHECK (RunRating BETWEEN 1 AND 10),
CHECK (AverageHR BETWEEN 1 AND 250),
FOREIGN KEY(RunTypeID) REFERENCES RunType(RunTypeID),
FOREIGN KEY(SchedulePlanID) REFERENCES SchedulePlan(SchedulePlanID),
FOREIGN KEY(ShoeID) REFERENCES Shoe(ShoeID),
FOREIGN KEY(RaceDetailID) REFERENCES RaceDetail(RaceDetailID));

CREATE TABLE IF NOT EXISTS VDOTPaces (
VDOT INT,
Unit INT,
Recovery INT,
Easy INT,
Long INT,
Threshold INT,
Interval INT,
Repetition INT,
[1500] INT,
Mile INT,
[2Mile] INT,
[3000] INT,
[5000] INT,
[10K] INT,
[15K] INT,
[10Mile] INT,
HalfMarathon INT,
Marathon INT,
PRIMARY KEY(VDOT, UNIT));

CREATE TABLE IF NOT EXISTS VDOTRaceTimes (
VDOT INT,
[1500] INT,
Mile INT,
[2Mile] INT,
[3000] INT,
[5000] INT,
[10K] INT,
[15K] INT,
[10Mile] INT,
HalfMarathon INT,
Marathon INT,
PRIMARY KEY(VDOT));

CREATE VIEW Calendar
AS
SELECT
    1 AS ItemPriority,
    'Race' AS ItemType,
    RaceDetailID AS ItemID,
    RaceDate AS ItemDate,
    RaceName AS ItemName,
    GoalTime AS RaceGoal,
    ActualTime AS FinishTime
FROM RaceDetail
INNER JOIN Race
    ON RaceDetail.RaceID = Race.RaceID
UNION ALL
SELECT
    2 AS ItemPriority,
    'Workout' AS ItemType,
    SchedulePlanID AS ItemID,
    SchedulePlan.ScheduleDate AS ItemDate,
    Workout.Name AS ItemName,
    NULL AS GoalTime,
    NULL AS ActualTime
FROM SchedulePlan
INNER JOIN ScheduleWorkout
    ON SchedulePlan.ScheduleWorkoutID = ScheduleWorkout.ScheduleWorkoutID
INNER JOIN Workout
    ON ScheduleWorkout.WorkoutID = Workout.WorkoutID
UNION ALL
SELECT
    3 AS ItemPriority,
    'Diary' AS ItemType,
    DiaryID AS ItemID,
    DiaryDate AS ItemDate,
    RunType.Name AS ItemName,
    NULL AS GoalTime,
    NULL AS ActualTime
FROM Diary
INNER JOIN RunType
    ON Diary.RunTypeID = RunType.RunTypeID;
"""

sql_vdot_race_times = """
INSERT INTO VDOTRaceTimes (
    VDOT,
    [1500],
    Mile,
    [2Mile],
    [3000],
    [5000],
    [10K],
    [15K],
    [10Mile],
    HalfMarathon,
    Marathon)
VALUES(?,?,?,?,?,?,?,?,?,?,?)
"""

vdot_race_times = [
    (30, 510.0, 551.0, 1159.0, 1076.0, 1840.0, 3826.0, 5894.0, 6340.0, 8464.0, 17357.0),
    (31, 495.0, 535.0, 1128.0, 1047.0, 1791.0, 3723.0, 5736.0, 6170.0, 8241.0, 16917.0),
    (32, 482.0, 521.0, 1098.0, 1019.0, 1745.0, 3626.0, 5587.0, 6010.0, 8029.0, 16499.0),
    (33, 469.0, 507.0, 1070.0, 993.0, 1701.0, 3534.0, 5445.0, 5860.0, 7827.0, 16102.0),
    (34, 457.0, 494.0, 1044.0, 969.0, 1659.0, 3446.0, 5310.0, 5710.0, 7636.0, 15723.0),
    (35, 445.0, 481.0, 1018.0, 945.0, 1620.0, 3363.0, 5182.0, 5570.0, 7453.0, 15363.0),
    (36, 434.0, 469.0, 994.0, 923.0, 1582.0, 3284.0, 5060.0, 5440.0, 7279.0, 15019.0),
    (37, 424.0, 458.0, 971.0, 901.0, 1546.0, 3209.0, 4944.0, 5320.0, 7114.0, 14690.0),
    (38, 414.0, 447.0, 949.0, 881.0, 1512.0, 3137.0, 4833.0, 5200.0, 6955.0, 14375.0),
    (39, 404.0, 437.0, 929.0, 861.0, 1479.0, 3069.0, 4727.0, 5090.0, 6804.0, 14074.0),
    (40, 395.0, 427.0, 908.0, 843.0, 1448.0, 3003.0, 4626.0, 4980.0, 6659.0, 13785.0),
    (41, 387.0, 418.0, 889.0, 825.0, 1418.0, 2941.0, 4529.0, 4870.0, 6520.0, 13509.0),
    (42, 379.0, 409.0, 871.0, 808.0, 1389.0, 2881.0, 4436.0, 4770.0, 6387.0, 13243.0),
    (43, 371.0, 401.0, 853.0, 791.0, 1361.0, 2824.0, 4347.0, 4680.0, 6260.0, 12988.0),
    (44, 363.0, 392.0, 836.0, 775.0, 1335.0, 2769.0, 4262.0, 4590.0, 6137.0, 12743.0),
    (45, 356.0, 385.0, 820.0, 760.0, 1310.0, 2716.0, 4180.0, 4500.0, 6020.0, 12506.0),
    (46, 349.0, 377.0, 805.0, 746.0, 1285.0, 2665.0, 4102.0, 4420.0, 5907.0, 12279.0),
    (47, 342.0, 370.0, 790.0, 732.0, 1262.0, 2616.0, 4026.0, 4330.0, 5798.0, 12060.0),
    (48, 336.0, 363.0, 775.0, 718.0, 1239.0, 2570.0, 3953.0, 4260.0, 5693.0, 11849.0),
    (49, 330.0, 356.0, 761.0, 705.0, 1218.0, 2524.0, 3884.0, 4180.0, 5592.0, 11646.0),
    (50, 324.0, 350.0, 748.0, 693.0, 1197.0, 2481.0, 3816.0, 4110.0, 5495.0, 11449.0),
    (51, 318.0, 344.0, 735.0, 681.0, 1176.0, 2439.0, 3751.0, 4040.0, 5402.0, 11259.0),
    (52, 313.0, 338.0, 722.0, 669.0, 1157.0, 2399.0, 3689.0, 3970.0, 5311.0, 11076.0),
    (53, 307.0, 332.0, 710.0, 658.0, 1138.0, 2360.0, 3628.0, 3910.0, 5224.0, 10899.0),
    (54, 302.0, 327.0, 699.0, 647.0, 1120.0, 2322.0, 3570.0, 3850.0, 5140.0, 10727.0),
    (55, 297.0, 321.0, 688.0, 637.0, 1102.0, 2286.0, 3513.0, 3780.0, 5058.0, 10561.0),
    (56, 293.0, 316.0, 677.0, 627.0, 1085.0, 2251.0, 3459.0, 3730.0, 4980.0, 10400.0),
    (57, 288.0, 311.0, 666.0, 617.0, 1069.0, 2217.0, 3406.0, 3670.0, 4903.0, 10245.0),
    (58, 284.0, 306.0, 656.0, 608.0, 1053.0, 2184.0, 3355.0, 3610.0, 4830.0, 10094.0),
    (59, 279.0, 302.0, 646.0, 598.0, 1037.0, 2152.0, 3306.0, 3560.0, 4758.0, 9947.0),
    (60, 275.0, 297.0, 637.0, 590.0, 1023.0, 2122.0, 3258.0, 3510.0, 4689.0, 9805.0),
    (61, 271.0, 293.0, 627.0, 581.0, 1008.0, 2092.0, 3212.0, 3460.0, 4622.0, 9668.0),
    (62, 267.0, 289.0, 618.0, 573.0, 994.0, 2063.0, 3167.0, 3410.0, 4557.0, 9534.0),
    (63, 264.0, 285.0, 610.0, 565.0, 980.0, 2035.0, 3123.0, 3370.0, 4494.0, 9404.0),
    (64, 260.0, 281.0, 601.0, 557.0, 967.0, 2008.0, 3081.0, 3320.0, 4433.0, 9278.0),
    (65, 256.0, 277.0, 593.0, 549.0, 954.0, 1981.0, 3040.0, 3280.0, 4373.0, 9155.0),
    (66, 253.0, 273.0, 585.0, 542.0, 942.0, 1955.0, 3000.0, 3230.0, 4316.0, 9036.0),
    (67, 250.0, 270.0, 577.0, 535.0, 929.0, 1931.0, 2962.0, 3190.0, 4260.0, 8920.0),
    (68, 246.0, 266.0, 570.0, 528.0, 918.0, 1906.0, 2924.0, 3150.0, 4205.0, 8807.0),
    (69, 243.0, 263.0, 563.0, 521.0, 906.0, 1883.0, 2888.0, 3110.0, 4152.0, 8697.0),
    (70, 240.0, 259.0, 556.0, 514.0, 895.0, 1860.0, 2852.0, 3070.0, 4101.0, 8590.0),
    (71, 237.0, 256.0, 549.0, 508.0, 884.0, 1838.0, 2818.0, 3040.0, 4051.0, 8486.0),
    (72, 234.0, 253.0, 542.0, 502.0, 873.0, 1816.0, 2784.0, 3000.0, 4002.0, 8384.0),
    (73, 232.0, 250.0, 535.0, 496.0, 863.0, 1795.0, 2751.0, 2970.0, 3954.0, 8285.0),
    (74, 229.0, 247.0, 529.0, 490.0, 853.0, 1774.0, 2719.0, 2930.0, 3908.0, 8189.0),
    (75, 226.0, 244.0, 523.0, 484.0, 843.0, 1754.0, 2688.0, 2900.0, 3863.0, 8095.0),
    (76, 224.0, 242.0, 517.0, 478.0, 834.0, 1735.0, 2658.0, 2870.0, 3819.0, 8003.0),
    (77, 221.0, 238.0, 511.0, 473.0, 824.0, 1716.0, 2629.0, 2840.0, 3776.0, 7914.0),
    (78, 218.8, 236.2, 505.0, 468.0, 815.0, 1697.0, 2600.0, 2800.0, 3735.0, 7827.0),
    (79, 216.5, 233.7, 500.0, 463.0, 806.0, 1679.0, 2572.0, 2770.0, 3694.0, 7742.0),
    (80, 214.2, 231.2, 494.2, 457.5, 797.8, 1661.0, 2545.0, 2750.0, 3654.0, 7658.0),
    (81, 211.9, 228.7, 488.9, 452.5, 789.3, 1644.0, 2518.0, 2720.0, 3615.0, 7577.0),
    (82, 209.7, 226.4, 483.7, 447.7, 781.1, 1627.0, 2492.0, 2690.0, 3578.0, 7497.0),
    (83, 207.6, 224.0, 478.6, 443.0, 773.0, 1611.0, 2466.0, 2660.0, 3541.0, 7420.0),
    (84, 205.5, 221.8, 473.6, 438.5, 765.2, 1594.0, 2442.0, 2640.0, 3505.0, 7344.0),
    (85, 203.5, 219.6, 468.8, 434.0, 757.4, 1579.0, 2417.0, 2610.0, 3470.0, 7270.0)
]

sql_vdot_paces = """
INSERT INTO VDOTPaces (
    VDOT,
    Unit,
    Recovery,
    Easy,
    Long,
    Threshold,
    Interval,
    Repetition,
    [1500],
    Mile,
    [2Mile],
    [3000],
    [5000],
    [10K],
    [15K],
    [10Mile],
    HalfMarathon,
    Marathon)
VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
"""

vdot_paces = [
    (30, 'KM', 476.0, 447.0, 494.0, 384.0, 355.0, 336.0, 340.0, 342.0, 358.0, 360.0, 368.0, 382.0, 392.0, 394.0, 401.0,
     411.0),
    (31, 'KM', 465.0, 436.0, 482.0, 374.0, 345.0, 326.0, 330.0, 332.0, 349.0, 350.0, 358.0, 372.0, 382.0, 383.0, 390.0,
     400.0),
    (32, 'KM', 455.0, 425.0, 472.0, 365.0, 335.0, 316.0, 321.0, 323.0, 339.0, 341.0, 349.0, 362.0, 372.0, 373.0, 380.0,
     391.0),
    (33, 'KM', 445.0, 415.0, 461.0, 356.0, 327.0, 306.0, 312.0, 315.0, 331.0, 332.0, 340.0, 353.0, 363.0, 364.0, 370.0,
     381.0),
    (34, 'KM', 436.0, 405.0, 451.0, 348.0, 320.0, 300.0, 304.0, 306.0, 323.0, 324.0, 331.0, 344.0, 354.0, 355.0, 361.0,
     372.0),
    (35, 'KM', 428.0, 396.0, 441.0, 340.0, 312.0, 292.0, 296.0, 298.0, 315.0, 316.0, 324.0, 336.0, 345.0, 346.0, 353.0,
     364.0),
    (36, 'KM', 420.0, 387.0, 431.0, 333.0, 305.0, 285.0, 289.0, 291.0, 307.0, 308.0, 316.0, 328.0, 337.0, 338.0, 345.0,
     355.0),
    (37, 'KM', 412.0, 379.0, 422.0, 326.0, 300.0, 277.0, 282.0, 284.0, 300.0, 301.0, 309.0, 320.0, 329.0, 330.0, 337.0,
     348.0),
    (38, 'KM', 404.0, 371.0, 414.0, 319.0, 294.0, 270.0, 276.0, 277.0, 293.0, 294.0, 302.0, 313.0, 322.0, 323.0, 329.0,
     340.0),
    (39, 'KM', 397.0, 363.0, 406.0, 312.0, 288.0, 265.0, 269.0, 271.0, 287.0, 288.0, 295.0, 306.0, 315.0, 316.0, 322.0,
     333.0),
    (40, 'KM', 390.0, 356.0, 398.0, 306.0, 282.0, 260.0, 263.0, 265.0, 281.0, 282.0, 289.0, 300.0, 308.0, 309.0, 315.0,
     326.0),
    (41, 'KM', 384.0, 349.0, 391.0, 300.0, 276.0, 255.0, 258.0, 259.0, 275.0, 276.0, 283.0, 294.0, 301.0, 303.0, 309.0,
     320.0),
    (42, 'KM', 377.0, 342.0, 383.0, 294.0, 271.0, 250.0, 252.0, 254.0, 269.0, 270.0, 277.0, 288.0, 295.0, 296.0, 302.0,
     313.0),
    (43, 'KM', 371.0, 335.0, 376.0, 289.0, 266.0, 245.0, 247.0, 249.0, 263.0, 265.0, 272.0, 282.0, 289.0, 291.0, 296.0,
     307.0),
    (44, 'KM', 365.0, 329.0, 370.0, 283.0, 261.0, 240.0, 242.0, 243.0, 258.0, 259.0, 267.0, 276.0, 284.0, 285.0, 290.0,
     301.0),
    (45, 'KM', 360.0, 323.0, 363.0, 278.0, 256.0, 235.0, 237.0, 239.0, 253.0, 254.0, 262.0, 271.0, 278.0, 279.0, 285.0,
     296.0),
    (46, 'KM', 354.0, 317.0, 357.0, 273.0, 250.0, 230.0, 232.0, 234.0, 248.0, 250.0, 257.0, 266.0, 273.0, 274.0, 279.0,
     290.0),
    (47, 'KM', 349.0, 312.0, 351.0, 269.0, 245.0, 225.0, 228.0, 229.0, 244.0, 245.0, 252.0, 261.0, 268.0, 269.0, 274.0,
     285.0),
    (48, 'KM', 344.0, 307.0, 345.0, 264.0, 240.0, 222.0, 224.0, 225.0, 239.0, 240.0, 247.0, 257.0, 263.0, 264.0, 269.0,
     280.0),
    (49, 'KM', 340.0, 301.0, 340.0, 260.0, 237.0, 220.0, 220.0, 221.0, 235.0, 236.0, 243.0, 252.0, 258.0, 260.0, 265.0,
     275.0),
    (50, 'KM', 335.0, 296.0, 334.0, 255.0, 233.0, 217.0, 216.0, 217.0, 231.0, 232.0, 239.0, 248.0, 254.0, 255.0, 260.0,
     271.0),
    (51, 'KM', 331.0, 292.0, 329.0, 251.0, 230.0, 215.0, 212.0, 213.0, 227.0, 228.0, 235.0, 243.0, 250.0, 251.0, 256.0,
     266.0),
    (52, 'KM', 326.0, 287.0, 324.0, 247.0, 226.0, 212.0, 208.0, 210.0, 223.0, 224.0, 231.0, 239.0, 245.0, 247.0, 251.0,
     262.0),
    (53, 'KM', 322.0, 283.0, 319.0, 244.0, 224.0, 210.0, 204.0, 206.0, 219.0, 220.0, 227.0, 236.0, 241.0, 243.0, 247.0,
     258.0),
    (54, 'KM', 318.0, 278.0, 314.0, 240.0, 220.0, 205.0, 201.0, 203.0, 215.0, 217.0, 224.0, 232.0, 238.0, 239.0, 243.0,
     254.0),
    (55, 'KM', 314.0, 274.0, 310.0, 236.0, 217.0, 202.0, 198.0, 199.0, 212.0, 213.0, 220.0, 228.0, 234.0, 235.0, 239.0,
     250.0),
    (56, 'KM', 311.0, 270.0, 305.0, 233.0, 215.0, 200.0, 195.0, 196.0, 209.0, 210.0, 217.0, 225.0, 230.0, 231.0, 236.0,
     246.0),
    (57, 'KM', 307.0, 266.0, 301.0, 230.0, 211.0, 195.0, 192.0, 193.0, 205.0, 206.0, 213.0, 221.0, 227.0, 228.0, 232.0,
     242.0),
    (58, 'KM', 303.0, 262.0, 297.0, 226.0, 208.0, 191.0, 189.0, 190.0, 202.0, 203.0, 210.0, 218.0, 223.0, 224.0, 228.0,
     239.0),
    (59, 'KM', 300.0, 259.0, 293.0, 223.0, 205.0, 190.0, 186.0, 187.0, 199.0, 200.0, 207.0, 215.0, 220.0, 221.0, 225.0,
     235.0),
    (60, 'KM', 297.0, 255.0, 289.0, 220.0, 202.0, 186.0, 183.0, 184.0, 196.0, 197.0, 204.0, 212.0, 217.0, 218.0, 222.0,
     232.0),
    (61, 'KM', 294.0, 251.0, 285.0, 217.0, 200.0, 185.0, 180.0, 182.0, 193.0, 194.0, 201.0, 209.0, 214.0, 215.0, 219.0,
     229.0),
    (62, 'KM', 290.0, 248.0, 281.0, 214.0, 197.0, 181.0, 178.0, 179.0, 191.0, 192.0, 198.0, 206.0, 211.0, 212.0, 215.0,
     225.0),
    (63, 'KM', 288.0, 245.0, 278.0, 212.0, 195.0, 180.0, 176.0, 177.0, 188.0, 189.0, 196.0, 203.0, 208.0, 209.0, 213.0,
     222.0),
    (64, 'KM', 285.0, 242.0, 274.0, 209.0, 192.0, 176.0, 173.0, 174.0, 185.0, 186.0, 193.0, 200.0, 205.0, 206.0, 210.0,
     219.0),
    (65, 'KM', 282.0, 239.0, 271.0, 206.0, 190.0, 175.0, 170.0, 172.0, 183.0, 184.0, 190.0, 198.0, 202.0, 203.0, 207.0,
     216.0),
    (66, 'KM', 279.0, 236.0, 268.0, 204.0, 186.0, 171.0, 168.0, 169.0, 180.0, 181.0, 188.0, 195.0, 200.0, 201.0, 204.0,
     214.0),
    (67, 'KM', 276.0, 233.0, 264.0, 201.0, 184.0, 170.0, 166.0, 167.0, 178.0, 179.0, 185.0, 193.0, 197.0, 198.0, 201.0,
     211.0),
    (68, 'KM', 274.0, 230.0, 261.0, 199.0, 182.0, 166.0, 164.0, 165.0, 176.0, 177.0, 183.0, 190.0, 194.0, 196.0, 199.0,
     208.0),
    (69, 'KM', 271.0, 227.0, 258.0, 196.0, 180.0, 165.0, 162.0, 163.0, 173.0, 174.0, 181.0, 188.0, 192.0, 193.0, 196.0,
     206.0),
    (70, 'KM', 269.0, 224.0, 255.0, 194.0, 177.0, 161.0, 160.0, 160.0, 171.0, 172.0, 179.0, 186.0, 190.0, 191.0, 194.0,
     203.0),
    (71, 'KM', 267.0, 222.0, 252.0, 192.0, 175.0, 160.0, 158.0, 159.0, 169.0, 170.0, 176.0, 183.0, 187.0, 189.0, 192.0,
     201.0),
    (72, 'KM', 264.0, 220.0, 240.0, 190.0, 173.0, 156.0, 156.0, 157.0, 167.0, 168.0, 174.0, 181.0, 185.0, 186.0, 189.0,
     198.0),
    (73, 'KM', 262.0, 217.0, 247.0, 188.0, 172.0, 155.0, 154.0, 155.0, 165.0, 166.0, 172.0, 179.0, 183.0, 184.0, 187.0,
     196.0),
    (74, 'KM', 260.0, 214.0, 244.0, 186.0, 170.0, 153.0, 152.0, 153.0, 163.0, 164.0, 170.0, 177.0, 181.0, 182.0, 185.0,
     194.0),
    (75, 'KM', 258.0, 212.0, 241.0, 184.0, 168.0, 151.0, 150.0, 151.0, 161.0, 162.0, 168.0, 175.0, 179.0, 180.0, 183.0,
     191.0),
    (76, 'KM', 256.0, 210.0, 238.0, 182.0, 166.0, 150.0, 149.0, 150.0, 159.0, 160.0, 166.0, 173.0, 177.0, 178.0, 181.0,
     189.0),
    (77, 'KM', 253.0, 208.0, 236.0, 180.0, 164.0, 150.0, 147.0, 147.0, 157.0, 158.0, 164.0, 171.0, 175.0, 176.0, 178.0,
     187.0),
    (78, 'KM', 252.0, 205.0, 233.0, 178.0, 163.0, 148.0, 145.0, 146.0, 156.0, 156.0, 163.0, 169.0, 173.0, 174.0, 177.0,
     185.0),
    (79, 'KM', 250.0, 203.0, 231.0, 176.0, 161.0, 147.0, 144.0, 145.0, 154.0, 155.0, 161.0, 167.0, 171.0, 172.0, 175.0,
     183.0),
    (80, 'KM', 248.0, 201.0, 229.0, 174.0, 159.0, 145.0, 142.0, 143.0, 152.0, 153.0, 159.0, 166.0, 169.0, 170.0, 173.0,
     181.0),
    (81, 'KM', 246.0, 199.0, 226.0, 173.0, 158.0, 143.0, 141.0, 142.0, 150.0, 151.0, 157.0, 164.0, 167.0, 169.0, 171.0,
     179.0),
    (82, 'KM', 244.0, 197.0, 224.0, 171.0, 156.0, 142.0, 139.0, 140.0, 149.0, 150.0, 156.0, 162.0, 166.0, 167.0, 169.0,
     177.0),
    (83, 'KM', 242.0, 195.0, 222.0, 169.0, 155.0, 141.0, 138.0, 139.0, 147.0, 148.0, 154.0, 161.0, 164.0, 165.0, 167.0,
     175.0),
    (84, 'KM', 241.0, 193.0, 220.0, 168.0, 154.0, 140.0, 137.0, 137.0, 146.0, 147.0, 153.0, 159.0, 162.0, 164.0, 166.0,
     174.0),
    (85, 'KM', 239.0, 191.0, 218.0, 166.0, 152.0, 138.0, 135.0, 136.0, 144.0, 145.0, 151.0, 157.0, 161.0, 162.0, 164.0,
     172.0),
    (30, 'Mile', 765.0, 720.0, 796.0, 618.0, 571.0, 541.0, 547.0, 551.0, 577.0, 579.0, 592.0, 615.0, 632.0, 634.0,
     645.0, 661.0),
    (31, 'Mile', 748.0, 701.0, 777.0, 602.0, 555.0, 525.0, 531.0, 535.0, 561.0, 564.0, 576.0, 599.0, 615.0, 617.0,
     628.0, 645.0),
    (32, 'Mile', 732.0, 684.0, 759.0, 587.0, 539.0, 509.0, 517.0, 521.0, 546.0, 549.0, 561.0, 583.0, 599.0, 601.0,
     612.0, 629.0),
    (33, 'Mile', 717.0, 667.0, 741.0, 573.0, 527.0, 493.0, 503.0, 507.0, 532.0, 535.0, 547.0, 568.0, 584.0, 586.0,
     597.0, 614.0),
    (34, 'Mile', 702.0, 652.0, 725.0, 560.0, 514.0, 482.0, 490.0, 494.0, 519.0, 522.0, 533.0, 554.0, 569.0, 571.0,
     582.0, 599.0),
    (35, 'Mile', 688.0, 637.0, 709.0, 547.0, 502.0, 470.0, 477.0, 481.0, 506.0, 509.0, 521.0, 541.0, 555.0, 557.0,
     568.0, 585.0),
    (36, 'Mile', 675.0, 623.0, 694.0, 535.0, 490.0, 458.0, 465.0, 469.0, 495.0, 497.0, 509.0, 528.0, 542.0, 544.0,
     555.0, 572.0),
    (37, 'Mile', 662.0, 609.0, 680.0, 524.0, 482.0, 446.0, 454.0, 458.0, 483.0, 485.0, 497.0, 516.0, 530.0, 532.0,
     542.0, 560.0),
    (38, 'Mile', 650.0, 596.0, 666.0, 513.0, 473.0, 434.0, 444.0, 447.0, 472.0, 474.0, 486.0, 504.0, 518.0, 520.0,
     530.0, 548.0),
    (39, 'Mile', 638.0, 584.0, 653.0, 502.0, 463.0, 426.0, 433.0, 437.0, 461.0, 464.0, 476.0, 493.0, 507.0, 509.0,
     518.0, 536.0),
    (40, 'Mile', 627.0, 572.0, 641.0, 492.0, 453.0, 418.0, 423.0, 427.0, 452.0, 454.0, 466.0, 483.0, 496.0, 498.0,
     507.0, 525.0),
    (41, 'Mile', 617.0, 561.0, 628.0, 482.0, 444.0, 410.0, 415.0, 418.0, 442.0, 444.0, 456.0, 473.0, 485.0, 487.0,
     497.0, 515.0),
    (42, 'Mile', 607.0, 550.0, 617.0, 472.0, 436.0, 402.0, 406.0, 409.0, 433.0, 435.0, 447.0, 463.0, 475.0, 477.0,
     487.0, 505.0),
    (43, 'Mile', 597.0, 540.0, 605.0, 462.0, 428.0, 394.0, 398.0, 401.0, 424.0, 426.0, 438.0, 454.0, 466.0, 468.0,
     477.0, 495.0),
    (44, 'Mile', 588.0, 530.0, 595.0, 453.0, 420.0, 386.0, 389.0, 392.0, 415.0, 418.0, 429.0, 445.0, 457.0, 459.0,
     468.0, 486.0),
    (45, 'Mile', 579.0, 520.0, 584.0, 445.0, 411.0, 378.0, 381.0, 385.0, 407.0, 410.0, 421.0, 437.0, 448.0, 450.0,
     459.0, 476.0),
    (46, 'Mile', 570.0, 511.0, 574.0, 437.0, 402.0, 370.0, 374.0, 377.0, 400.0, 402.0, 413.0, 428.0, 440.0, 442.0,
     450.0, 468.0),
    (47, 'Mile', 562.0, 502.0, 565.0, 429.0, 394.0, 362.0, 366.0, 370.0, 392.0, 395.0, 406.0, 421.0, 431.0, 433.0,
     442.0, 459.0),
    (48, 'Mile', 554.0, 493.0, 555.0, 422.0, 387.0, 358.0, 360.0, 363.0, 385.0, 387.0, 398.0, 413.0, 424.0, 426.0,
     434.0, 451.0),
    (49, 'Mile', 546.0, 485.0, 546.0, 416.0, 382.0, 354.0, 354.0, 356.0, 378.0, 380.0, 392.0, 406.0, 416.0, 418.0,
     426.0, 444.0),
    (50, 'Mile', 539.0, 477.0, 538.0, 410.0, 375.0, 350.0, 347.0, 350.0, 371.0, 374.0, 385.0, 399.0, 409.0, 411.0,
     419.0, 436.0),
    (51, 'Mile', 532.0, 469.0, 529.0, 404.0, 370.0, 346.0, 341.0, 344.0, 365.0, 367.0, 378.0, 392.0, 402.0, 404.0,
     412.0, 429.0),
    (52, 'Mile', 525.0, 462.0, 521.0, 398.0, 364.0, 341.0, 335.0, 338.0, 358.0, 361.0, 372.0, 386.0, 395.0, 397.0,
     405.0, 422.0),
    (53, 'Mile', 518.0, 455.0, 513.0, 392.0, 360.0, 337.0, 329.0, 332.0, 352.0, 355.0, 366.0, 379.0, 389.0, 391.0,
     398.0, 415.0),
    (54, 'Mile', 512.0, 448.0, 506.0, 386.0, 355.0, 329.0, 324.0, 327.0, 347.0, 349.0, 360.0, 373.0, 383.0, 385.0,
     392.0, 409.0),
    (55, 'Mile', 505.0, 441.0, 498.0, 380.0, 350.0, 325.0, 318.0, 321.0, 341.0, 344.0, 354.0, 367.0, 376.0, 378.0,
     385.0, 402.0),
    (56, 'Mile', 499.0, 435.0, 491.0, 375.0, 346.0, 321.0, 314.0, 316.0, 336.0, 338.0, 349.0, 362.0, 371.0, 373.0,
     379.0, 396.0),
    (57, 'Mile', 493.0, 428.0, 484.0, 369.0, 340.0, 313.0, 308.0, 311.0, 330.0, 333.0, 344.0, 356.0, 365.0, 367.0,
     373.0, 390.0),
    (58, 'Mile', 488.0, 422.0, 478.0, 364.0, 335.0, 308.0, 304.0, 306.0, 326.0, 328.0, 338.0, 351.0, 359.0, 361.0,
     368.0, 384.0),
    (59, 'Mile', 482.0, 416.0, 471.0, 359.0, 331.0, 305.0, 299.0, 302.0, 320.0, 323.0, 333.0, 346.0, 354.0, 356.0,
     362.0, 379.0),
    (60, 'Mile', 477.0, 410.0, 465.0, 354.0, 325.0, 300.0, 295.0, 297.0, 316.0, 318.0, 329.0, 341.0, 349.0, 351.0,
     357.0, 373.0),
    (61, 'Mile', 472.0, 405.0, 459.0, 350.0, 321.0, 297.0, 290.0, 293.0, 311.0, 313.0, 324.0, 336.0, 344.0, 346.0,
     352.0, 368.0),
    (62, 'Mile', 467.0, 399.0, 453.0, 345.0, 317.0, 292.0, 286.0, 289.0, 307.0, 309.0, 319.0, 332.0, 339.0, 341.0,
     347.0, 363.0),
    (63, 'Mile', 462.0, 394.0, 447.0, 341.0, 313.0, 289.0, 283.0, 285.0, 303.0, 305.0, 315.0, 327.0, 335.0, 337.0,
     342.0, 358.0),
    (64, 'Mile', 458.0, 389.0, 441.0, 336.0, 309.0, 284.0, 278.0, 281.0, 298.0, 300.0, 311.0, 323.0, 330.0, 332.0,
     338.0, 353.0),
    (65, 'Mile', 453.0, 384.0, 436.0, 332.0, 305.0, 281.0, 274.0, 277.0, 294.0, 296.0, 307.0, 318.0, 326.0, 328.0,
     333.0, 349.0),
    (66, 'Mile', 449.0, 379.0, 430.0, 328.0, 300.0, 276.0, 271.0, 273.0, 290.0, 292.0, 303.0, 314.0, 321.0, 323.0,
     329.0, 344.0),
    (67, 'Mile', 444.0, 375.0, 425.0, 324.0, 297.0, 273.0, 268.0, 270.0, 287.0, 288.0, 299.0, 310.0, 317.0, 319.0,
     324.0, 340.0),
    (68, 'Mile', 440.0, 370.0, 420.0, 320.0, 293.0, 268.0, 263.0, 266.0, 283.0, 285.0, 295.0, 306.0, 313.0, 315.0,
     320.0, 335.0),
    (69, 'Mile', 436.0, 366.0, 415.0, 316.0, 290.0, 265.0, 260.0, 263.0, 279.0, 281.0, 291.0, 303.0, 309.0, 311.0,
     316.0, 331.0),
    (70, 'Mile', 432.0, 361.0, 410.0, 313.0, 286.0, 260.0, 257.0, 259.0, 275.0, 278.0, 288.0, 299.0, 305.0, 307.0,
     312.0, 327.0),
    (71, 'Mile', 429.0, 357.0, 406.0, 309.0, 283.0, 257.0, 254.0, 256.0, 272.0, 274.0, 284.0, 295.0, 302.0, 304.0,
     309.0, 323.0),
    (72, 'Mile', 425.0, 353.0, 401.0, 305.0, 280.0, 252.0, 251.0, 253.0, 269.0, 271.0, 280.0, 292.0, 298.0, 300.0,
     305.0, 319.0),
    (73, 'Mile', 421.0, 349.0, 397.0, 302.0, 277.0, 249.0, 248.0, 250.0, 266.0, 267.0, 277.0, 288.0, 295.0, 297.0,
     301.0, 315.0),
    (74, 'Mile', 418.0, 345.0, 392.0, 299.0, 274.0, 246.0, 245.0, 247.0, 262.0, 264.0, 274.0, 285.0, 291.0, 293.0,
     298.0, 312.0),
    (75, 'Mile', 414.0, 341.0, 388.0, 296.0, 271.0, 244.0, 242.0, 244.0, 259.0, 261.0, 271.0, 282.0, 288.0, 290.0,
     294.0, 308.0),
    (76, 'Mile', 411.0, 338.0, 384.0, 292.0, 268.0, 241.0, 240.0, 242.0, 256.0, 258.0, 268.0, 279.0, 285.0, 287.0,
     291.0, 305.0),
    (77, 'Mile', 408.0, 334.0, 380.0, 289.0, 265.0, 241.0, 237.0, 238.0, 253.0, 255.0, 265.0, 276.0, 282.0, 284.0,
     288.0, 301.0),
    (78, 'Mile', 404.0, 330.0, 376.0, 286.0, 263.0, 239.0, 234.0, 236.0, 251.0, 252.0, 262.0, 273.0, 278.0, 280.0,
     284.0, 298.0),
    (79, 'Mile', 401.0, 327.0, 372.0, 283.0, 260.0, 237.0, 232.0, 233.0, 248.0, 250.0, 259.0, 270.0, 275.0, 277.0,
     281.0, 295.0),
    (80, 'Mile', 398.0, 324.0, 368.0, 281.0, 257.0, 233.0, 229.0, 231.0, 245.0, 247.0, 256.0, 267.0, 273.0, 275.0,
     278.0, 292.0),
    (81, 'Mile', 395.0, 320.0, 364.0, 278.0, 255.0, 231.0, 227.0, 228.0, 242.0, 244.0, 254.0, 264.0, 270.0, 272.0,
     275.0, 288.0),
    (82, 'Mile', 392.0, 317.0, 361.0, 275.0, 252.0, 229.0, 224.0, 226.0, 240.0, 241.0, 251.0, 261.0, 267.0, 269.0,
     272.0, 285.0),
    (83, 'Mile', 390.0, 314.0, 357.0, 272.0, 250.0, 227.0, 222.0, 224.0, 237.0, 239.0, 248.0, 259.0, 264.0, 266.0,
     270.0, 282.0),
    (84, 'Mile', 387.0, 311.0, 354.0, 270.0, 248.0, 225.0, 220.0, 221.0, 235.0, 236.0, 246.0, 256.0, 262.0, 264.0,
     267.0, 280.0),
    (85, 'Mile', 384.0, 308.0, 350.0, 267.0, 245.0, 223.0, 218.0, 219.0, 232.0, 234.0, 243.0, 254.0, 259.0, 261.0,
     264.0, 277.0)
]

sql_distances = """
INSERT INTO Distance (
    Name,
    PrintName,
    KM,
    Miles)
VALUES(?,?,?,?);
"""

distances = [
    ('1500', '1500', '1.5', '0.93'),
    ('Mile', 'Mile', '1.6', '1'),
    ('2Mile', '2 Mile', '3.2', '2'),
    ('3000', '3000', '3', '1.86'),
    ('5000', '5000', '5', '3.1'),
    ('10K', '10K', '10', '6.2'),
    ('15K', '15K', '15', '9.3'),
    ('10Mile', '10 Mile', '16.1', '10'),
    ('HalfMarathon', 'Half Marathon', '21', '13.1'),
    ('Marathon', 'Marathon', '42.1', '26.2')
]

sql_run_types = """
INSERT INTO RunType (Name)
VALUES(?);
"""

run_types = [
    ('Tempo',),
    ('Threshold',),
    ('Race',),
    ('Parkrun',),
    ('Long',),
    ('Fartlek',),
    ('Steady',),
    ('Interval',),
    ('Regular',),
    ('Easy',)
]

sql_interval_type = """
INSERT INTO TrainingInterval (
Name,
DefaultTarget,
HRZoneLow,
HRZoneHigh)
VALUES(?,?,?,?);
"""

interval_type = [
    ('Recovery', 'hr', '0.50', '0.76'),
    ('Easy', 'hr', '0.70', '0.81'),
    ('Long', 'hr', '0.74', '0.84'),
    ('Threshold', 'pace', '0.80', '0.91'),
    ('Interval', 'pace', '0.94', '0.98'),
    ('Repetition', 'pace', '0.90', '1.00')
]

sql_settings_temp = """
INSERT INTO Settings (Name, DateOfBirth, MaxHR, Units)
VALUES(?,?,?,?);
"""

temp_settings = ('Enter Name', '01/01/1900', 200, 'mile')

sql_race_times = """
INSERT OR REPLACE INTO VDOTRacePace(DistanceID)
SELECT DistanceID
FROM Distance;
"""

sql_default_races = """
INSERT OR REPLACE INTO Race(RaceName, DistanceID)
SELECT 'Unknown ' || PrintName, DistanceID
FROM Distance;
"""

workout_templates = [
('Easy 10M', "[['easy', '', ['10', 'mile'], 1, 1]]", 874703421, 62393971, 0) ,
('Recovery 4M', "[['recovery', '', ['4', 'mile'], 1, 1]]", 874703434, 62393984, 0) ,
('Easy 6M - 8x 100m Strides', "[['easy', '', ['3', 'mile'], 1, 1], {'repeat': 8, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['easy', '', ['2', 'mile'], 1, 1]]", 874703451, 62394001, 0) ,
('Interval 9M - 2x 1200m 2x 1000m 1x 800m', "[['easy', '', ['2', 'mile'], 1, 1], {'repeat': 2, 'rest': ['easy', 'none', ['600', 'metre'], 1, 0], 'active': ['interval', '', ['1200', 'metre'], 1, 1]}, {'repeat': 2, 'rest': ['easy', 'none', ['500', 'metre'], 1, 0], 'active': ['interval', '', ['1000', 'metre'], 1, 1]}, ['interval', '', ['800', 'metre'], 1, 1], ['easy', '', ['2.5', 'mile'], 1, 1]]", 874703413, 62393963, 0) ,
('Long 16M - 12M Marathon Pace', "[['long', '', ['3', 'mile'], 1, 1], ['marathon', '', ['12', 'mile'], 1, 1], ['long', '', ['1', 'mile'], 1, 1]]", 874703415, 62393965, 0) ,
('Long 8M', "[['long', '', ['8', 'mile'], 1, 1]]", 874703420, 62393970, 0) ,
('Recovery 4M - 6x 100m Strides', "[['recovery', '', ['2', 'mile'], 1, 1], {'repeat': 6, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['recovery', '', ['1.5', 'mile'], 1, 1]]", 874703462, 62394012, 0) ,
('Long 20M', "[['long', '', ['20', 'mile'], 1, 1]]", 874703455, 62394005, 0) ,
('Threshold 9M - 38 mins', "[['easy', '', ['2', 'mile'], 1, 1], ['threshold', '', '00:38:00', 1, 1], ['easy', '', ['2', 'mile'], 1, 1]]", 874703483, 62394033, 0) ,
('Easy 8M - 8x 100m Strides', "[['easy', '', ['4', 'mile'], 1, 1], {'repeat': 8, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['easy', '', ['3', 'mile'], 1, 1]]", 874703432, 62393982, 0) ,
('Interval 9M - 4x 1200m 2x 1000m', "[['easy', '', ['1.5', 'mile'], 1, 1], {'repeat': 4, 'rest': ['easy', 'none', ['600', 'metre'], 1, 0], 'active': ['interval', '', ['1200', 'metre'], 1, 1]}, {'repeat': 2, 'rest': ['easy', 'none', ['500', 'metre'], 1, 0], 'active': ['interval', '', ['1000', 'metre'], 1, 1]}, ['easy', '', ['1.5', 'mile'], 1, 1]]", 874703428, 62393978, 0) ,
('Easy 7M - 2x (4x 200m)', "[['easy', '', ['2.5', 'mile'], 1, 1], {'repeat': 2, 'rest': ['easy', 'none', '00:04:00', 1, 1], 'active': {'repeat': 4, 'rest': ['easy', 'none', ['200', 'metre'], 1, 0], 'active': ['mile', '', ['200', 'metre'], 1, 1]}}, ['easy', '', ['2.5', 'mile'], 1, 1]]", 874703486, 62394036, 0) ,
('Recovery 6M', "[['recovery', '', ['6', 'mile'], 1, 1]]", 874703414, 62393964, 0) ,
('Easy 6M - 6x 12s Hill & 6x 100m Strides', "[['easy', '', ['2', 'mile'], 1, 1], ['easy', '', None, 1, 1], {'repeat': 6, 'rest': ['easy', 'none', None, 1, 0], 'active': ['repetition', 'none', '00:00:12', 1, 1]}, ['easy', '', ['1', 'mile'], 1, 1], {'repeat': 6, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['easy', '', ['2.5', 'mile'], 1, 1]]", 874703467, 62394017, 0) ,
('Dress Rehearsal 7M - 2M Marathon Pace', "[['easy', '', ['4', 'mile'], 1, 1], ['marathon', '', ['2', 'mile'], 1, 1], ['easy', '', ['1', 'mile'], 1, 1]]", 874703485, 62394035, 0) ,
('Easy 8M - 6x 12s Hill & 6x 100m Strides', "[['easy', '', ['3', 'mile'], 1, 1], ['easy', '', None, 1, 1], {'repeat': 6, 'rest': ['easy', 'none', None, 1, 0], 'active': ['repetition', 'none', '00:00:12', 1, 1]}, ['easy', '', ['1', 'mile'], 1, 1], {'repeat': 6, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['easy', '', ['3.5', 'mile'], 1, 1]]", 874703480, 62394030, 0) ,
('Long 13M - 8M Marathon Pace', "[['long', '', ['4', 'mile'], 1, 1], ['marathon', '', ['8', 'mile'], 1, 1], ['long', '', ['1', 'mile'], 1, 1]]", 874703426, 62393976, 0) ,
('Easy 7M - 6x 100m Strides', "[['easy', '', ['3.25', 'mile'], 1, 1], {'repeat': 6, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['easy', '', ['3', 'mile'], 1, 1]]", 874703474, 62394024, 0) ,
('Long 17M', "[['long', '', ['17', 'mile'], 1, 1]]", 874703419, 62393969, 0) ,
('Threshold 8M - 20 & 16 mins', "[['easy', '', ['1.5', 'mile'], 1, 1], ['threshold', '', '00:20:00', 1, 1], ['easy', 'none', '00:04:00', 1, 1], ['threshold', '', '00:16:00', 1, 1], ['easy', '', ['1.5', 'mile'], 1, 1]]", 874703435, 62393985, 0) ,
('Threshold 7M - 3x 8 mins', "[['easy', '', ['1.5', 'mile'], 1, 1], {'repeat': 2, 'rest': ['easy', 'none', '00:04:00', 1, 1], 'active': ['threshold', '', '00:08:00', 1, 1]}, ['threshold', '', '00:08:00', 1, 1], ['easy', '', ['1.5', 'mile'], 1, 1]]", 874703476, 62394026, 0) ,
('Interval 8M - 4x 800m 2x 600m', "[['easy', '', ['2', 'mile'], 1, 1], {'repeat': 4, 'rest': ['easy', 'none', ['400', 'metre'], 1, 0], 'active': ['interval', '', ['800', 'metre'], 1, 1]}, {'repeat': 2, 'rest': ['easy', 'none', ['300', 'metre'], 1, 0], 'active': ['interval', '', ['600', 'metre'], 1, 1]}, ['easy', '', ['2', 'mile'], 1, 1]]", 874703484, 62394034, 0) ,
('Dress Rehearsal 7M - 4x 100m & 2M HM Pace', "[['easy', '', ['2', 'mile'], 1, 1], {'repeat': 4, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['easy', '', ['1', 'mile'], 1, 1], ['halfmarathon', '', ['2', 'mile'], 1, 1], ['easy', '', ['1.5', 'mile'], 1, 1]]", 874703447, 62393997, 0) ,
('Threshold 8M - 18 & 12 mins', "[['easy', '', ['2', 'mile'], 1, 1], ['threshold', '', '00:18:00', 1, 1], ['easy', 'none', '00:04:00', 1, 1], ['threshold', '', '00:12:00', 1, 1], ['easy', '', ['1.5', 'mile'], 1, 1]]", 874703466, 62394016, 0) ,
('Recovery 3M - 4x 100m Strides', "[['recovery', '', ['1.5', 'mile'], 1, 1], {'repeat': 4, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['recovery', '', ['1', 'mile'], 1, 1]]", 874703439, 62393989, 0) ,
('Threshold 11M - 7M', "[['easy', '', ['2', 'mile'], 1, 1], ['threshold', '', ['7', 'mile'], 1, 1], ['easy', '', ['2', 'mile'], 1, 1]]", 874703473, 62394023, 0) ,
('Threshold 8M - 18 & 15 mins', "[['easy', '', ['2', 'mile'], 1, 1], ['threshold', '', '00:18:00', 1, 1], ['easy', 'none', '00:04:00', 1, 1], ['threshold', '', '00:15:00', 1, 1], ['easy', '', ['1.5', 'mile'], 1, 1]]", 874703457, 62394007, 0) ,
('Recovery 7M - 6x 100m Strides', "[['recovery', '', ['4', 'mile'], 1, 1], {'repeat': 6, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['recovery', '', ['2.5', 'mile'], 1, 1]]", 874703450, 62394000, 0) ,
('Interval 8M - 6x 3 mins Hill', "[['easy', '', ['1.5', 'mile'], 1, 1], ['easy', '', None, 1, 1], {'repeat': 6, 'rest': ['easy', 'none', None, 1, 0], 'active': ['interval', '', '00:03:00', 1, 1]}, ['easy', '', ['1.5', 'mile'], 1, 1]]", 874703477, 62394027, 0) ,
('Recovery 4M - 4x 100m Strides', "[['recovery', '', ['2', 'mile'], 1, 1], {'repeat': 4, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['recovery', '', ['1.5', 'mile'], 1, 1]]", 874703454, 62394004, 0) ,
('Easy 8M - 2x (5x 200m)', "[['easy', '', ['3', 'mile'], 1, 1], {'repeat': 2, 'rest': ['easy', 'none', '00:04:00', 1, 1], 'active': {'repeat': 5, 'rest': ['easy', 'none', ['200', 'metre'], 1, 0], 'active': ['mile', '', ['200', 'metre'], 1, 1]}}, ['easy', '', ['2.5', 'mile'], 1, 1]]", 874703418, 62393968, 0) ,
('Long 15M', "[['long', '', ['15', 'mile'], 1, 1]]", 874703442, 62393992, 0) ,
('Easy 7M - 8x 100m Strides', "[['easy', '', ['3', 'mile'], 1, 1], {'repeat': 8, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['easy', '', ['3', 'mile'], 1, 1]]", 874703459, 62394009, 0) ,
('Easy 8M - 10x 100m Strides', "[['easy', '', ['4', 'mile'], 1, 1], {'repeat': 10, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['easy', '', ['3', 'mile'], 1, 1]]", 874703452, 62394002, 0) ,
('Long 18M - 14M Marathon Pace', "[['long', '', ['3', 'mile'], 1, 1], ['marathon', '', ['14', 'mile'], 1, 1], ['long', '', ['1', 'mile'], 1, 1]]", 874703445, 62393995, 0) ,
('Easy 6M - 2x (6x 100m) Strides', "[['easy', '', ['2', 'mile'], 1, 1], {'repeat': 2, 'rest': ['easy', 'none', '00:03:00', 1, 1], 'active': {'repeat': 6, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}}, ['easy', '', ['2.5', 'mile'], 1, 1]]", 874703410, 62393960, 0) ,
('Long 16M', "[['long', '', ['16', 'mile'], 1, 1]]", 874703433, 62393983, 0) ,
('Easy 7M - 6x 12s Hill & 6x 100m Strides', "[['easy', '', ['2', 'mile'], 1, 1], ['easy', '', None, 1, 1], {'repeat': 6, 'rest': ['easy', 'none', None, 1, 0], 'active': ['repetition', 'none', '00:00:12', 1, 1]}, ['easy', '', ['1', 'mile'], 1, 1], {'repeat': 6, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['easy', '', ['3.5', 'mile'], 1, 1]]", 874703438, 62393988, 0) ,
('Interval 8M - 3x 1600m', "[['easy', '', ['2', 'mile'], 1, 1], {'repeat': 3, 'rest': ['easy', 'none', ['0.5', 'mile'], 1, 0], 'active': ['interval', '', ['1600', 'metre'], 1, 1]}, ['easy', '', ['1.5', 'mile'], 1, 1]]", 874703481, 62394031, 0) ,
('Recovery 5M', "[['recovery', '', ['5', 'mile'], 1, 1]]", 874703446, 62393996, 0) ,
('Long 16M - 10M Marathon Pace', "[['long', '', ['5', 'mile'], 1, 1], ['marathon', '', ['10', 'mile'], 1, 1], ['long', '', ['1', 'mile'], 1, 1]]", 874703458, 62394008, 0) ,
('Threshold 9M - 5M', "[['easy', '', ['2', 'mile'], 1, 1], ['threshold', '', ['5', 'mile'], 1, 1], ['easy', '', ['2', 'mile'], 1, 1]]", 874703424, 62393974, 0) ,
('Progressive Long 12M - 3M Threshold', "[['long', '', ['9', 'mile'], 1, 1], ['threshold', '', ['3', 'mile'], 1, 1]]", 874703441, 62393991, 0) ,
('Long 14M', "[['long', '', ['14', 'mile'], 1, 1]]", 874703471, 62394021, 0) ,
('Long 18M', "[['long', '', ['18', 'mile'], 1, 1]]", 874703440, 62393990, 0) ,
('Easy 8M - 2x (6x 100m) Strides', "[['easy', '', ['3.5', 'mile'], 1, 1], {'repeat': 2, 'rest': ['easy', 'none', '00:03:00', 1, 1], 'active': {'repeat': 6, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}}, ['easy', '', ['3', 'mile'], 1, 1]]", 874703411, 62393961, 0) ,
('Threshold 8M - 2x 10 mins & 8 mins', "[['easy', '', ['2', 'mile'], 1, 1], {'repeat': 2, 'rest': ['easy', 'none', '00:04:00', 1, 1], 'active': ['threshold', '', '00:10:00', 1, 1]}, ['threshold', '', '00:08:00', 1, 1], ['easy', '', ['1.5', 'mile'], 1, 1]]", 874703427, 62393977, 0) ,
('Interval 9M - 3x 1000m 3x 800m', "[['easy', '', ['2', 'mile'], 1, 1], {'repeat': 3, 'rest': ['easy', 'none', ['500', 'metre'], 1, 0], 'active': ['interval', '', ['1000', 'metre'], 1, 1]}, {'repeat': 3, 'rest': ['easy', 'none', ['400', 'metre'], 1, 0], 'active': ['interval', '', ['800', 'metre'], 1, 1]}, ['easy', '', ['2', 'mile'], 1, 1]]", 874703412, 62393962, 0) ,
('Easy 9M', "[['easy', '', ['9', 'mile'], 1, 1]]", 874703469, 62394019, 0) ,
('Progressive Long 12M - 2M Threshold', "[['long', '', ['10', 'mile'], 1, 1], ['threshold', '', ['2', 'mile'], 1, 1]]", 874703436, 62393986, 0) ,
('Easy 6M - 2x (4x 200m)', "[['easy', '', ['2', 'mile'], 1, 1], {'repeat': 2, 'rest': ['easy', 'none', '00:04:00', 1, 1], 'active': {'repeat': 4, 'rest': ['easy', 'none', ['200', 'metre'], 1, 0], 'active': ['mile', '', ['200', 'metre'], 1, 1]}}, ['easy', '', ['2', 'mile'], 1, 1]]", 874703417, 62393967, 0) ,
('Interval 10M - 4x 1200m', "[['easy', '', ['3', 'mile'], 1, 1], {'repeat': 4, 'rest': ['easy', 'none', ['600', 'metre'], 1, 0], 'active': ['interval', '', ['1200', 'metre'], 1, 1]}, ['easy', '', ['2.5', 'mile'], 1, 1]]", 874703431, 62393981, 0) ,
('Easy 8M - 2x (4x 150m) Strides', "[['easy', '', ['3', 'mile'], 1, 1], {'repeat': 2, 'rest': ['easy', 'none', '00:04:00', 1, 1], 'active': {'repeat': 4, 'rest': ['easy', 'none', ['250', 'metre'], 1, 0], 'active': ['repetition', '', ['150', 'metre'], 1, 1]}}, ['easy', '', ['3', 'mile'], 1, 1]]", 874703461, 62394011, 0) ,
('Threshold 7M - 14 & 12 mins', "[['easy', '', ['2', 'mile'], 1, 1], ['threshold', '', '00:14:00', 1, 1], ['easy', 'none', '00:04:00', 1, 1], ['threshold', '', '00:12:00', 1, 1], ['easy', '', ['1.5', 'mile'], 1, 1]]", 874703449, 62393999, 0) ,
('Threshold 8M - 12 mins & 2x 10 mins', "[['easy', '', ['1.5', 'mile'], 1, 1], ['threshold', '', '00:12:00', 1, 1], ['easy', 'none', '00:04:00', 1, 1], ['threshold', '', '00:10:00', 1, 1], ['easy', 'none', '00:04:00', 1, 1], ['threshold', '', '00:10:00', 1, 1], ['easy', '', ['1.5', 'mile'], 1, 1]]", 874703472, 62394022, 0) ,
('Threshold 8M - 4M', "[['easy', '', ['2', 'mile'], 1, 1], ['threshold', '', ['4', 'mile'], 1, 1], ['easy', '', ['2', 'mile'], 1, 1]]", 874703470, 62394020, 0) ,
('Easy 7M - 10x 100m Strides', "[['easy', '', ['4', 'mile'], 1, 1], {'repeat': 10, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['easy', '', ['2', 'mile'], 1, 1]]", 874703443, 62393993, 0) ,
('Long 12M', "[['long', '', ['12', 'mile'], 1, 1]]", 874703429, 62393979, 0) ,
('Easy 7M - 2x (4x 150m) Strides', "[['easy', '', ['2.5', 'mile'], 1, 1], {'repeat': 2, 'rest': ['easy', 'none', '00:04:00', 1, 1], 'active': {'repeat': 4, 'rest': ['easy', 'none', ['250', 'metre'], 1, 0], 'active': ['repetition', '', ['150', 'metre'], 1, 1]}}, ['easy', '', ['2.5', 'mile'], 1, 1]]", 874703444, 62393994, 0) ,
('Threshold 10M - 6M', "[['easy', '', ['2', 'mile'], 1, 1], ['threshold', '', ['6', 'mile'], 1, 1], ['easy', '', ['2', 'mile'], 1, 1]]", 874703437, 62393987, 0) ,
('Interval 8M - 5x 1000m', "[['easy', '', ['2', 'mile'], 1, 1], {'repeat': 5, 'rest': ['easy', 'none', ['500', 'metre'], 1, 0], 'active': ['interval', '', ['1000', 'metre'], 1, 1]}, ['easy', '', ['1.5', 'mile'], 1, 1]]", 874703422, 62393972, 0) ,
('Interval 9M - 5x 1000m', "[['easy', '', ['2', 'mile'], 1, 1], {'repeat': 5, 'rest': ['easy', 'none', ['500', 'metre'], 1, 0], 'active': ['interval', '', ['1000', 'metre'], 1, 1]}, ['easy', '', ['2.5', 'mile'], 1, 1]]", 874703482, 62394032, 0) ,
('Interval 8M - 5x 600m', "[['easy', '', ['3', 'mile'], 1, 1], {'repeat': 5, 'rest': ['easy', 'none', ['300', 'metre'], 1, 0], 'active': ['interval', '', ['600', 'metre'], 1, 1]}, ['easy', '', ['2.5', 'mile'], 1, 1]]", 874703423, 62393973, 0) ,
('Easy 8M - 2x (5x 150m) Strides', "[['easy', '', ['3', 'mile'], 1, 1], {'repeat': 2, 'rest': ['easy', 'none', '00:04:00', 1, 1], 'active': {'repeat': 5, 'rest': ['easy', 'none', ['250', 'metre'], 1, 0], 'active': ['repetition', '', ['150', 'metre'], 1, 1]}}, ['easy', '', ['2.5', 'mile'], 1, 1]]", 874703456, 62394006, 0) ,
('Recovery 6M - 6x 100m Strides', "[['recovery', '', ['3', 'mile'], 1, 1], {'repeat': 6, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['recovery', '', ['2.5', 'mile'], 1, 1]]", 874703453, 62394003, 0) ,
('Long 10M', "[['long', '', ['10', 'mile'], 1, 1]]", 874703460, 62394010, 0) ,
('Long 11M', "[['long', '', ['11', 'mile'], 1, 1]]", 874703465, 62394015, 0) ,
('Easy 7M', "[['easy', '', ['7', 'mile'], 1, 1]]", 874703463, 62394013, 0) ,
('Interval 9M - 6x 1000m', "[['easy', '', ['2', 'mile'], 1, 1], {'repeat': 6, 'rest': ['easy', 'none', ['500', 'metre'], 1, 0], 'active': ['interval', '', ['1000', 'metre'], 1, 1]}, ['easy', '', ['1.5', 'mile'], 1, 1]]", 874703409, 62393959, 0) ,
('Recovery 5M - 6x 100m Strides', "[['recovery', '', ['2.25', 'mile'], 1, 1], {'repeat': 6, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['recovery', '', ['2', 'mile'], 1, 1]]", 874703475, 62394025, 0) ,
('Long 9M', "[['long', '', ['9', 'mile'], 1, 1]]", 874703468, 62394018, 0) ,
('Interval 8M - 5x 800m', "[['easy', '', ['3', 'mile'], 1, 1], {'repeat': 5, 'rest': ['easy', 'none', ['400', 'metre'], 1, 0], 'active': ['interval', '', ['800', 'metre'], 1, 1]}, ['easy', '', ['2', 'mile'], 1, 1]]", 874703478, 62394028, 0) ,
('Recovery 3M', "[['recovery', '', ['3', 'mile'], 1, 1]]", 874703425, 62393975, 0) ,
('Dress Rehearsal 6M - 4x 100m & 1200m 10K Pace', "[['easy', '', ['2', 'mile'], 1, 1], {'repeat': 4, 'rest': ['easy', 'none', ['100', 'metre'], 1, 0], 'active': ['repetition', '', ['100', 'metre'], 1, 1]}, ['easy', '', ['1', 'mile'], 1, 1], ['10k', '', ['1200', 'metre'], 1, 1], ['easy', '', ['1.5', 'mile'], 1, 1]]", 874703448, 62393998, 0) ,
('Easy 8M', "[['easy', '', ['8', 'mile'], 1, 1]]", 874703416, 62393966, 0) ,
('Progressive Long 13M - 3M Threshold', "[['long', '', ['10', 'mile'], 1, 1], ['threshold', '', ['3', 'mile'], 1, 1]]", 874703464, 62394014, 0) ,
('Threshold 10M - 5M', "[['easy', '', ['3', 'mile'], 1, 1], ['threshold', '', ['5', 'mile'], 1, 1], ['easy', '', ['2', 'mile'], 1, 1]]", 874703430, 62393980, 0) ,
('Interval 10M - 2x (2x 1200m & 800m)', "[['easy', '', ['3', 'mile'], 1, 1], {'repeat': 2, 'rest': ['easy', 'none', ['600', 'metre'], 1, 0], 'active': ['interval', '', ['1200', 'metre'], 1, 1]}, ['interval', '', ['800', 'metre'], 1, 1], ['easy', 'none', '00:04:00', 1, 0], {'repeat': 2, 'rest': ['easy', 'none', ['600', 'metre'], 1, 0], 'active': ['interval', '', ['1200', 'metre'], 1, 1]}, ['interval', '', ['800', 'metre'], 1, 1], ['easy', '', ['2.5', 'mile'], 1, 1]]", 874703479, 62394029, 0)
]

sql_workout_temp = """
INSERT OR REPLACE INTO Workout (Name, WorkoutJSON, FileName, SerialNumber, IsCustom)
VALUES(?,?,?,?,?);
"""

schedules = [
    ('5K 40 Miles', 0),
    ('10K 42 Miles', 0),
    ('Half Marathon 47 Miles', 0),
    ('Half Marathon 63 Miles', 0),
    ('Marathon 55 Miles', 0)
]

sql_schedules = """
INSERT OR REPLACE INTO Schedule (ScheduleName, IsCustom)
VALUES(?, ?);"""

sql_schedule_workouts = """
INSERT INTO ScheduleWorkout (ScheduleID, WorkoutID, DaysFromEnd, WorkoutWeek, WorkoutWeekDay, RaceDistanceID)
VALUES (
    (SELECT ScheduleID FROM Schedule WHERE ScheduleName = ?),
    (SELECT WorkoutID FROM Workout WHERE Name = ?),
    ?,
    ?,
    ?,
    (SELECT DistanceID FROM Distance WHERE PrintName = ?));"""

schedule_workouts = [
    ('Half Marathon 47 Miles', 'Easy 6M - 8x 100m Strides', 82, 1, 2, None),
    ('Half Marathon 47 Miles', 'Long 8M', 81, 1, 3, None),
    ('Half Marathon 47 Miles', 'Threshold 7M - 14 & 12 mins', 79, 1, 5, None),
    ('Half Marathon 47 Miles', 'Long 10M', 77, 1, 7, None),
    ('Half Marathon 47 Miles', 'Easy 7M - 6x 12s Hill & 6x 100m Strides', 75, 2, 2, None),
    ('Half Marathon 47 Miles', 'Long 8M', 74, 2, 3, None),
    ('Half Marathon 47 Miles', 'Threshold 8M - 18 & 12 mins', 72, 2, 5, None),
    ('Half Marathon 47 Miles', 'Long 11M', 70, 2, 7, None),
    ('Half Marathon 47 Miles', 'Easy 8M - 6x 12s Hill & 6x 100m Strides', 68, 3, 2, None),
    ('Half Marathon 47 Miles', 'Long 9M', 67, 3, 3, None),
    ('Half Marathon 47 Miles', 'Threshold 8M - 18 & 15 mins', 65, 3, 5, None),
    ('Half Marathon 47 Miles', 'Progressive Long 12M - 2M Threshold', 63, 3, 7, None),
    ('Half Marathon 47 Miles', 'Easy 8M - 2x (5x 150m) Strides', 61, 4, 2, None),
    ('Half Marathon 47 Miles', 'Easy 7M', 60, 4, 3, None),
    ('Half Marathon 47 Miles', 'Easy 8M', 58, 4, 5, None),
    ('Half Marathon 47 Miles', 'Easy 9M', 56, 4, 7, None),
    ('Half Marathon 47 Miles', 'Threshold 8M - 20 & 16 mins', 54, 5, 2, None),
    ('Half Marathon 47 Miles', 'Long 9M', 53, 5, 3, None),
    ('Half Marathon 47 Miles', 'Easy 7M - 10x 100m Strides', 51, 5, 5, None),
    ('Half Marathon 47 Miles', 'Recovery 4M', 50, 5, 6, None),
    ('Half Marathon 47 Miles', 'Progressive Long 12M - 3M Threshold', 49, 5, 7, None),
    ('Half Marathon 47 Miles', 'Easy 8M - 6x 12s Hill & 6x 100m Strides', 47, 6, 2, None),
    ('Half Marathon 47 Miles', 'Long 9M', 46, 6, 3, None),
    ('Half Marathon 47 Miles', 'Interval 9M - 6x 1000m', 44, 6, 5, None),
    ('Half Marathon 47 Miles', 'Recovery 5M', 43, 6, 6, None),
    ('Half Marathon 47 Miles', 'Long 12M', 42, 6, 7, None),
    ('Half Marathon 47 Miles', 'Threshold 9M - 38 mins', 40, 7, 2, None),
    ('Half Marathon 47 Miles', 'Long 10M', 39, 7, 3, None),
    ('Half Marathon 47 Miles', 'Easy 8M - 10x 100m Strides', 37, 7, 5, None),
    ('Half Marathon 47 Miles', 'Recovery 5M', 36, 7, 6, None) ,
    ('Half Marathon 47 Miles', 'Progressive Long 13M - 3M Threshold', 35, 7, 7, None),
    ('Half Marathon 47 Miles', 'Easy 8M - 2x (4x 150m) Strides', 33, 8, 2, None),
    ('Half Marathon 47 Miles', 'Easy 7M', 32, 8, 3, None),
    ('Half Marathon 47 Miles', 'Recovery 3M - 4x 100m Strides', 30, 8, 5, None),
    ('Half Marathon 47 Miles', '10K Race', 29, 8, 6, '10K'),
    ('Half Marathon 47 Miles', 'Long 10M', 28, 8, 7, None),
    ('Half Marathon 47 Miles', 'Easy 8M', 26, 9, 2, None),
    ('Half Marathon 47 Miles', 'Long 11M', 25, 9, 3, None),
    ('Half Marathon 47 Miles', 'Interval 10M - 2x (2x 1200m & 800m)', 23, 9, 5, None),
    ('Half Marathon 47 Miles', 'Recovery 4M', 22, 9, 6, None),
    ('Half Marathon 47 Miles', 'Long 14M', 21, 9, 7, None),
    ('Half Marathon 47 Miles', 'Easy 8M - 2x (4x 150m) Strides', 19, 10, 2, None),
    ('Half Marathon 47 Miles', 'Easy 7M', 18, 10, 3, None),
    ('Half Marathon 47 Miles', 'Recovery 3M - 4x 100m Strides', 16, 10, 5, None),
    ('Half Marathon 47 Miles', '10K Race', 15, 10, 6, '10K'),
    ('Half Marathon 47 Miles', 'Long 10M', 14, 10, 7, None),
    ('Half Marathon 47 Miles', 'Easy 6M - 2x (6x 100m) Strides', 12, 11, 2, None),
    ('Half Marathon 47 Miles', 'Recovery 4M', 11, 11, 3, None),
    ('Half Marathon 47 Miles', 'Interval 9M - 2x 1200m 2x 1000m 1x 800m', 9, 11, 5, None),
    ('Half Marathon 47 Miles', 'Recovery 3M', 8, 11, 6, None),
    ('Half Marathon 47 Miles', 'Long 10M', 7, 11, 7, None),
    ('Half Marathon 47 Miles', 'Dress Rehearsal 7M - 4x 100m & 2M HM Pace', 5, 12, 2, None),
    ('Half Marathon 47 Miles', 'Recovery 5M', 4, 12, 3, None),
    ('Half Marathon 47 Miles', 'Recovery 4M', 3, 12, 4, None),
    ('Half Marathon 47 Miles', 'Recovery 3M - 4x 100m Strides', 1, 12, 6, None),
    # ('Half Marathon 63 Miles', 'Easy 9M', 82, 1, 2, None) ,
    # ('Half Marathon 63 Miles', 'Threshold 8M - 15 & 12 mins', 81, 1, 3, None) ,
    # ( 'Half Marathon 63 Miles', 'Long 10M', 80, 1, 4, None) ,
    # ('Half Marathon 63 Miles', 'Easy 7M - 2x (6x 100m) Strides', 78, 1, 6, None) ,
    # ('Half Marathon 63 Miles', 'Long 12M', 77, 1, 7, None) ,
    # ('Half Marathon 63 Miles', 'Easy 9M', 75, 2, 2, None) ,
    # ('Half Marathon 63 Miles', 'Threshold 9M - 18 & 14 mins', 74, 2, 3, None) ,
    # ('Half Marathon 63 Miles', 'Long 11M', 73, 2, 4, None) ,
    # ('Half Marathon 63 Miles', 'Easy 7M - 6x 12s Hill & 8x 100m Strides', 71, 2, 6, None) ,
    # ('Half Marathon 63 Miles', 'Long 13M', 70, 2, 7, None) ,
    # ('Half Marathon 63 Miles', 'Easy 9M', 68, 3, 2, None) ,
    # ('Half Marathon 63 Miles', 'Threshold 10M - 20 & 16 mins', 67, 3, 3, None) ,
    # ('Half Marathon 63 Miles', 'Long 11M', 66, 3, 4, None) ,
    # ('Half Marathon 63 Miles', 'Easy 8M - 6x 12s Hill & 8x 100m Strides', 64, 3, 6, None) ,
    # ('Half Marathon 63 Miles', 'Progressive Long 14M - 2M Threshold', 63, 3, 7, None) ,
    # ('Half Marathon 63 Miles', 'Easy 8M', 61, 4, 2, None) ,
    # ('Half Marathon 63 Miles', 'Easy 10M', 60, 4, 3, None) ,
    # ('Half Marathon 63 Miles', 'Easy 9M', 59, 4, 4, None) ,
    # ('Half Marathon 63 Miles', 'Easy 9M - 2x (5x 150m) Strides', 57, 4, 6, None) ,
    # ('Half Marathon 63 Miles', 'Long 11M', 56, 4, 7, None) ,
    # ('Half Marathon 63 Miles', 'Easy 9M', 54, 5, 2, None) ,
    # ('Half Marathon 63 Miles', 'Threshold 10M - 22 & 18 mins', 53, 5, 3, None) ,
    # ('Half Marathon 63 Miles', 'Long 11M', 52, 5, 4, None) ,
    # ('Half Marathon 63 Miles', 'Recovery 3M', 51, 5, 5, None) ,
    # ('Half Marathon 63 Miles', 'Easy 8M - 2x (6x 100m) Strides', 50, 5, 6, None) ,
    # ('Half Marathon 63 Miles', 'Progressive Long 14M - 3M Threshold', 49, 5, 7, None) ,
    # ('Half Marathon 63 Miles', 'Easy 9M', 47, 6, 2, None) ,
    # ('Half Marathon 63 Miles', 'Interval 10M - 3x 1200m 3x 1000m', 46, 6, 3, None) ,
    # ('Half Marathon 63 Miles', 'Long 12M', 45, 6, 4, None) ,
    # ('Half Marathon 63 Miles', 'Recovery 4M', 44, 6, 5, None) ,
    # ('Half Marathon 63 Miles', 'Easy 8M - 6x 12s Hill & 8x 100m Strides', 43, 6, 6, None) ,
    # ('Half Marathon 63 Miles', 'Long 15M', 42, 6, 7, None) ,
    # ('Half Marathon 63 Miles', 'Easy 9M', 40, 7, 2, None) ,
    # ('Half Marathon 63 Miles', 'Threshold 10M - 40 mins', 39, 7, 3, None) ,
    # ('Half Marathon 63 Miles', 'Long 12M', 38, 7, 4, None) ,
    # ('Half Marathon 63 Miles', 'Recovery 5M', 37, 7, 5, None) ,
    # ('Half Marathon 63 Miles', 'Easy 9M - 10x 100m Strides', 36, 7, 6, None) ,
    # ('Half Marathon 63 Miles', 'Progressive Long 16M - 3M Threshold', 35, 7, 7, None) ,
    # ('Half Marathon 63 Miles', 'Easy 10M - 2x (5x 150m) Strides', 33, 8, 2, None) ,
    # ('Half Marathon 63 Miles', 'Easy 9M', 32, 8, 3, None) ,
    # ('Half Marathon 63 Miles', 'Recovery 7M', 31, 8, 4, None) ,
    # ('Half Marathon 63 Miles', 'Recovery 4M - 4x 100m Strides', 30, 8, 5, None) ,
    # ('Half Marathon 63 Miles', '10K Race', 29, 8, 6, '10K') ,
    # ('Half Marathon 63 Miles', 'Long 12M', 28, 8, 7, None) ,
    # ('Half Marathon 63 Miles', 'Easy 9M', 26, 9, 2, None) ,
    # ('Half Marathon 63 Miles', 'Long 11M', 25, 9, 3, None) ,
    # ('Half Marathon 63 Miles', 'Interval 9M - 6x 1200m', 24, 9, 4, None) ,
    # ('Half Marathon 63 Miles', 'Recovery 6M', 23, 9, 5, None) ,
    # ('Half Marathon 63 Miles', 'Easy 10M', 22, 9, 6, None) ,
    # ('Half Marathon 63 Miles', 'Long 16M', 21, 9, 7, None) ,
    # ('Half Marathon 63 Miles', 'Easy 10M - 2x (5x 150m) Strides', 19, 10, 2, None) ,
    # ('Half Marathon 63 Miles', 'Easy 9M', 18, 10, 3, None) ,
    # ('Half Marathon 63 Miles', 'Recovery 7M', 17, 10, 4, None) ,
    # ('Half Marathon 63 Miles', 'Recovery 4M - 4x 100m Strides', 16, 10, 5, None) ,
    # ('Half Marathon 63 Miles', '10K Race', 15, 10, 6, '10K') ,
    # ('Half Marathon 63 Miles', 'Long 12M', 14, 10, 7, None) ,
    # ('Half Marathon 63 Miles', 'Easy 7M', 12, 11, 2, None) ,
    # ('Half Marathon 63 Miles', 'Recovery 5M', 11, 11, 3, None) ,
    # ('Half Marathon 63 Miles', 'Interval 10M - 2x 1200m 4x 800m', 10, 11, 4, None) ,
    # ('Half Marathon 63 Miles', 'Recovery 4M', 9, 11, 5, None) ,
    # ('Half Marathon 63 Miles', 'Easy 6M - 2x (6x 100m) Strides', 8, 11, 6, None) ,
    # ('Half Marathon 63 Miles', 'Long 11M', 7, 11, 7, None) ,
    # ('Half Marathon 63 Miles', 'Dress Rehearsal 8M - 6x 100m & 2M HM Pace', 5, 12, 2, None) ,
    # ('Half Marathon 63 Miles', 'Recovery 7M', 4, 12, 3, None) ,
    # ('Half Marathon 63 Miles', 'Recovery 6M', 3, 12, 4, None) ,
    # ('Half Marathon 63 Miles', 'Recovery 4M - 4x 100m Strides', 1, 12, 6, None) ,
('Marathon 55 Miles', 'Threshold 8M - 4M', 124, 1, 2, None) ,
('Marathon 55 Miles', 'Easy 9M', 122, 1, 4, None) ,
('Marathon 55 Miles', 'Recovery 4M', 120, 1, 6, None) ,
('Marathon 55 Miles', 'Long 12M', 119, 1, 7, None) ,
('Marathon 55 Miles', 'Easy 8M - 10x 100m Strides', 117, 2, 2, None) ,
('Marathon 55 Miles', 'Easy 10M', 115, 2, 4, None) ,
('Marathon 55 Miles', 'Recovery 5M', 113, 2, 6, None) ,
('Marathon 55 Miles', 'Long 13M - 8M Marathon Pace', 112, 2, 7, None) ,
('Marathon 55 Miles', 'Easy 10M', 110, 3, 2, None) ,
('Marathon 55 Miles', 'Recovery 4M', 109, 3, 3, None) ,
('Marathon 55 Miles', 'Threshold 8M - 4M', 108, 3, 4, None) ,
('Marathon 55 Miles', 'Recovery 4M', 106, 3, 6, None) ,
('Marathon 55 Miles', 'Long 14M', 105, 3, 7, None) ,
('Marathon 55 Miles', 'Easy 8M - 10x 100m Strides', 103, 4, 2, None) ,
('Marathon 55 Miles', 'Recovery 5M', 102, 4, 3, None) ,
('Marathon 55 Miles', 'Easy 10M', 101, 4, 4, None) ,
('Marathon 55 Miles', 'Recovery 4M', 99, 4, 6, None) ,
('Marathon 55 Miles', 'Long 15M', 98, 4, 7, None) ,
('Marathon 55 Miles', 'Threshold 9M - 5M', 96, 5, 2, None) ,
('Marathon 55 Miles', 'Recovery 5M', 95, 5, 3, None) ,
('Marathon 55 Miles', 'Easy 10M', 94, 5, 4, None) ,
('Marathon 55 Miles', 'Recovery 5M', 92, 5, 6, None) ,
('Marathon 55 Miles', 'Long 16M - 10M Marathon Pace', 91, 5, 7, None) ,
('Marathon 55 Miles', 'Easy 8M - 10x 100m Strides', 89, 6, 2, None) ,
('Marathon 55 Miles', 'Recovery 5M', 88, 6, 3, None) ,
('Marathon 55 Miles', 'Easy 8M', 87, 6, 4, None) ,
('Marathon 55 Miles', 'Recovery 4M', 85, 6, 6, None) ,
('Marathon 55 Miles', 'Long 12M', 84, 6, 7, None) ,
('Marathon 55 Miles', 'Threshold 10M - 5M', 82, 7, 2, None) ,
('Marathon 55 Miles', 'Recovery 4M', 81, 7, 3, None) ,
('Marathon 55 Miles', 'Long 11M', 80, 7, 4, None) ,
('Marathon 55 Miles', 'Easy 7M - 8x 100m Strides', 78, 7, 6, None) ,
('Marathon 55 Miles', 'Long 18M', 77, 7, 7, None) ,
('Marathon 55 Miles', 'Recovery 7M - 6x 100m Strides', 75, 8, 2, None) ,
('Marathon 55 Miles', 'Long 12M', 74, 8, 3, None) ,
('Marathon 55 Miles', 'Threshold 10M - 6M', 72, 8, 5, None) ,
('Marathon 55 Miles', 'Recovery 5M', 71, 8, 6, None) ,
('Marathon 55 Miles', 'Long 20M', 70, 8, 7, None) ,
('Marathon 55 Miles', 'Recovery 6M', 68, 9, 2, None) ,
('Marathon 55 Miles', 'Long 14M', 67, 9, 3, None) ,
('Marathon 55 Miles', 'Recovery 6M', 66, 9, 4, None) ,
('Marathon 55 Miles', 'Recovery 6M - 6x 100m Strides', 64, 9, 6, None) ,
('Marathon 55 Miles', 'Long 16M - 12M Marathon Pace', 63, 9, 7, None) ,
('Marathon 55 Miles', 'Easy 8M', 61, 10, 2, None) ,
('Marathon 55 Miles', 'Interval 8M - 5x 800m', 60, 10, 3, None) ,
('Marathon 55 Miles', 'Recovery 5M', 59, 10, 4, None) ,
('Marathon 55 Miles', 'Easy 8M - 8x 100m Strides', 57, 10, 6, None) ,
('Marathon 55 Miles', 'Long 14M', 56, 10, 7, None) ,
('Marathon 55 Miles', 'Easy 7M - 6x 100m Strides', 54, 11, 2, None) ,
('Marathon 55 Miles', 'Threshold 11M - 7M', 53, 11, 3, None) ,
('Marathon 55 Miles', 'Long 12M', 51, 11, 5, None) ,
('Marathon 55 Miles', 'Recovery 5M', 50, 11, 6, None) ,
('Marathon 55 Miles', 'Long 20M', 49, 11, 7, None) ,
('Marathon 55 Miles', 'Interval 8M - 5x 600m', 47, 12, 2, None) ,
('Marathon 55 Miles', 'Long 12M', 46, 12, 3, None) ,
('Marathon 55 Miles', 'Recovery 5M - 6x 100m Strides', 44, 12, 5, None) ,
('Marathon 55 Miles', 'Half Marathon Race', 43, 12, 6, 'Half Marathon') ,
('Marathon 55 Miles', 'Long 17M', 42, 12, 7, None) ,
('Marathon 55 Miles', 'Easy 8M', 40, 13, 2, None) ,
('Marathon 55 Miles', 'Interval 9M - 5x 1000m', 39, 13, 3, None) ,
('Marathon 55 Miles', 'Long 12M', 37, 13, 5, None) ,
('Marathon 55 Miles', 'Recovery 5M', 36, 13, 6, None) ,
('Marathon 55 Miles', 'Long 18M - 14M Marathon Pace', 35, 13, 7, None) ,
('Marathon 55 Miles', 'Interval 8M - 5x 600m', 33, 14, 2, None) ,
('Marathon 55 Miles', 'Long 11M', 32, 14, 3, None) ,
('Marathon 55 Miles', 'Recovery 4M - 6x 100m Strides', 30, 14, 5, None) ,
('Marathon 55 Miles', 'Half Marathon Race', 29, 14, 6, 'Half Marathon') ,
('Marathon 55 Miles', 'Long 17M', 28, 14, 7, None) ,
('Marathon 55 Miles', 'Easy 7M - 6x 100m Strides', 26, 15, 2, None) ,
('Marathon 55 Miles', 'Interval 10M - 4x 1200m', 25, 15, 3, None) ,
('Marathon 55 Miles', 'Long 11M', 23, 15, 5, None) ,
('Marathon 55 Miles', 'Recovery 4M', 22, 15, 6, None) ,
('Marathon 55 Miles', 'Long 20M', 21, 15, 7, None) ,
('Marathon 55 Miles', 'Interval 8M - 5x 600m', 19, 16, 2, None) ,
('Marathon 55 Miles', 'Recovery 6M', 18, 16, 3, None) ,
('Marathon 55 Miles', 'Recovery 4M - 6x 100m Strides', 16, 16, 5, None) ,
('Marathon 55 Miles', '10K Race', 15, 16, 6, '10K') ,
('Marathon 55 Miles', 'Long 16M', 14, 16, 7, None) ,
('Marathon 55 Miles', 'Easy 7M - 8x 100m Strides', 12, 17, 2, None) ,
('Marathon 55 Miles', 'Interval 8M - 3x 1600m', 11, 17, 3, None) ,
('Marathon 55 Miles', 'Recovery 5M - 6x 100m Strides', 9, 17, 5, None) ,
('Marathon 55 Miles', 'Long 12M', 7, 17, 7, None) ,
('Marathon 55 Miles', 'Recovery 6M', 5, 18, 2, None) ,
('Marathon 55 Miles', 'Dress Rehearsal 7M - 2M Marathon Pace', 4, 18, 3, None) ,
('Marathon 55 Miles', 'Recovery 5M - 6x 100m Strides', 2, 18, 5, None) ,
('Marathon 55 Miles', 'Recovery 4M', 1, 18, 6, None) ,
#('5K 40 Miles', 'Easy 6M - 6x 12s Hill & 6x 100m Strides', 82, 1, 2, None) ,
#('5K 40 Miles', 'Long 8M', 81, 1, 3, None) ,
#('5K 40 Miles', 'Threshold 7M - 4x 6 mins', 79, 1, 5, None) ,
#('5K 40 Miles', 'Long 9M', 77, 1, 7, None) ,
#('5K 40 Miles', 'Easy 5M - 6x 12s Hill & 6x 100m Strides', 75, 2, 2, None) ,
#('5K 40 Miles', 'Long 8M', 74, 2, 3, None) ,
#('5K 40 Miles', 'Interval 7M - 5x 3 mins Hill', 72, 2, 5, None) ,
#('5K 40 Miles', 'Recovery 3M', 71, 2, 6, None) ,
#('5K 40 Miles', 'Long 10M', 70, 2, 7, None) ,
#('5K 40 Miles', 'Easy 6M - 2x (3x 300m)', 68, 3, 2, None) ,
#('5K 40 Miles', 'Long 8M', 67, 3, 3, None) ,
#('5K 40 Miles', 'Threshold 8M - 3x 8 mins', 65, 3, 5, None) ,
#('5K 40 Miles', 'Recovery 3M', 64, 3, 6, None) ,
#('5K 40 Miles', 'Long 10M', 63, 3, 7, None) ,
#('5K 40 Miles', 'Easy 6M - 2x (4x 200m)', 61, 4, 2, None) ,
#('5K 40 Miles', 'Easy 6M', 60, 4, 3, None) ,
#('5K 40 Miles', 'Easy 6M', 58, 4, 5, None) ,
#('5K 40 Miles', 'Recovery 3M', 57, 4, 6, None) ,
#('5K 40 Miles', 'Easy 8M', 56, 4, 7, None) ,
#('5K 40 Miles', 'Easy 7M - 6x 12s Hill & 6x 100m Strides', 54, 5, 2, None) ,
#('5K 40 Miles', 'Long 8M', 53, 5, 3, None) ,
#('5K 40 Miles', 'Interval 8M - 5x 1000m', 51, 5, 5, None) ,
#('5K 40 Miles', 'Recovery 3M', 50, 5, 6, None) ,
#('5K 40 Miles', 'Long 10M', 49, 5, 7, None) ,
#('5K 40 Miles', 'Threshold 7M - 20 mins', 47, 6, 2, None) ,
#('5K 40 Miles', 'Long 8M', 46, 6, 3, None) ,
#('5K 40 Miles', 'Interval 8M - 8x 600m', 44, 6, 5, None) ,
#('5K 40 Miles', 'Recovery 4M', 43, 6, 6, None) ,
#('5K 40 Miles', 'Long 10M', 42, 6, 7, None) ,
#('5K 40 Miles', 'Easy 7M - 2x (6x 100m) Strides', 40, 7, 2, None) ,
#('5K 40 Miles', 'Long 8M', 39, 7, 3, None) ,
#('5K 40 Miles', 'Interval 9M - 3x 1000m 3x 800m', 37, 7, 5, None) ,
#('5K 40 Miles', 'Recovery 4M', 36, 7, 6, None) ,
#('5K 40 Miles', 'Long 10M', 35, 7, 7, None) ,
#('5K 40 Miles', 'Easy 7M - 2x (4x 150m) Strides', 33, 8, 2, None) ,
#('5K 40 Miles', 'Easy 7M', 32, 8, 3, None) ,
#('5K 40 Miles', 'Recovery 3M', 30, 8, 5, None) ,
#('5K 40 Miles', '5K Race', 29, 8, 6, '5000') ,
#('5K 40 Miles', 'Long 8M', 28, 8, 7, None) ,
#('5K 40 Miles', 'Easy 8M - 2x (5x 100m) Strides', 26, 9, 2, None) ,
#('5K 40 Miles', 'Long 9M', 25, 9, 3, None) ,
#('5K 40 Miles', 'Interval 9M - 2x (1200m & 2x 800m)', 23, 9, 5, None) ,
#('5K 40 Miles', 'Recovery 4M', 22, 9, 6, None) ,
#('5K 40 Miles', 'Long 10M', 21, 9, 7, None) ,
#('5K 40 Miles', 'Easy 7M - 2x (4x 150m) Strides', 19, 10, 2, None) ,
#('5K 40 Miles', 'Easy 7M', 18, 10, 3, None) ,
#('5K 40 Miles', 'Recovery 3M', 16, 10, 5, None) ,
#('5K 40 Miles', '5K Race', 15, 10, 6, '5000') ,
#('5K 40 Miles', 'Long 8M', 14, 10, 7, None) ,
#('5K 40 Miles', 'Easy 6M - 8x 100m Strides', 12, 11, 2, None) ,
#('5K 40 Miles', 'Recovery 4M', 11, 11, 3, None) ,
#('5K 40 Miles', 'Interval 8M - 4x 800m 2x 600m', 10, 11, 4, None) ,
#('5K 40 Miles', 'Recovery 4M', 8, 11, 6, None) ,
#('5K 40 Miles', 'Easy 7M', 7, 11, 7, None) ,
#('5K 40 Miles', 'Dress Rehearsal 6M - 4x 100m & 800m 5K Pace', 6, 12, 1, None) ,
#('5K 40 Miles', 'Recovery 3M', 5, 12, 2, None) ,
#('5K 40 Miles', 'Recovery 4M', 4, 12, 3, None) ,
#('5K 40 Miles', 'Recovery 4M', 2, 12, 5, None) ,
#('5K 40 Miles', 'Recovery 3M - 4x 100m Strides', 1, 12, 6, None) ,
('10K 42 Miles', 'Easy 6M - 6x 12s Hill & 6x 100m Strides', 82, 1, 2, None) ,
('10K 42 Miles', 'Long 8M', 81, 1, 3, None) ,
('10K 42 Miles', 'Threshold 7M - 3x 8 mins', 79, 1, 5, None) ,
('10K 42 Miles', 'Long 9M', 77, 1, 7, None) ,
('10K 42 Miles', 'Easy 6M - 2x (4x 200m)', 75, 2, 2, None) ,
('10K 42 Miles', 'Long 8M', 74, 2, 3, None) ,
('10K 42 Miles', 'Threshold 8M - 2x 10 mins & 8 mins', 72, 2, 5, None) ,
('10K 42 Miles', 'Long 10M', 70, 2, 7, None) ,
('10K 42 Miles', 'Easy 7M - 6x 12s Hill & 6x 100m Strides', 68, 3, 2, None) ,
('10K 42 Miles', 'Long 9M', 67, 3, 3, None) ,
('10K 42 Miles', 'Interval 8M - 6x 3 mins Hill', 65, 3, 5, None) ,
('10K 42 Miles', 'Long 10M', 63, 3, 7, None) ,
('10K 42 Miles', 'Easy 7M - 2x (4x 200m)', 61, 4, 2, None) ,
('10K 42 Miles', 'Easy 7M', 60, 4, 3, None) ,
('10K 42 Miles', 'Easy 7M', 58, 4, 5, None) ,
('10K 42 Miles', 'Easy 9M', 56, 4, 7, None) ,
('10K 42 Miles', 'Easy 7M - 6x 12s Hill & 6x 100m Strides', 54, 5, 2, None) ,
('10K 42 Miles', 'Long 9M', 53, 5, 3, None) ,
('10K 42 Miles', 'Interval 8M - 5x 1000m', 51, 5, 5, None) ,
('10K 42 Miles', 'Recovery 3M', 50, 5, 6, None) ,
('10K 42 Miles', 'Long 10M', 49, 5, 7, None) ,
('10K 42 Miles', 'Easy 8M - 2x (5x 200m)', 47, 6, 2, None) ,
('10K 42 Miles', 'Long 9M', 46, 6, 3, None) ,
('10K 42 Miles', 'Threshold 8M - 12 mins & 2x 10 mins', 44, 6, 5, None) ,
('10K 42 Miles', 'Recovery 3M', 43, 6, 6, None) ,
('10K 42 Miles', 'Long 11M', 42, 6, 7, None) ,
('10K 42 Miles', 'Easy 8M - 2x (6x 100m) Strides', 40, 7, 2, None) ,
('10K 42 Miles', 'Long 9M', 39, 7, 3, None) ,
('10K 42 Miles', 'Interval 9M - 4x 1200m 2x 1000m', 37, 7, 5, None) ,
('10K 42 Miles', 'Recovery 4M', 36, 7, 6, None) ,
('10K 42 Miles', 'Long 11M', 35, 7, 7, None) ,
('10K 42 Miles', 'Easy 7M - 2x (4x 150m) Strides', 33, 8, 2, None) ,
('10K 42 Miles', 'Easy 7M', 32, 8, 3, None) ,
('10K 42 Miles', 'Recovery 3M', 30, 8, 5, None) ,
('10K 42 Miles', '5K Race', 29, 8, 6, '5000') ,
('10K 42 Miles', 'Long 9M', 28, 8, 7, None) ,
('10K 42 Miles', 'Easy 8M - 8x 100m Strides', 26, 9, 2, None) ,
('10K 42 Miles', 'Long 9M', 25, 9, 3, None) ,
('10K 42 Miles', 'Interval 9M - 3x 1000m 3x 800m', 23, 9, 5, None) ,
('10K 42 Miles', 'Recovery 5M', 22, 9, 6, None) ,
('10K 42 Miles', 'Long 11M', 21, 9, 7, None) ,
('10K 42 Miles', 'Easy 7M - 2x (4x 150m) Strides', 19, 10, 2, None) ,
('10K 42 Miles', 'Easy 7M', 18, 10, 3, None) ,
('10K 42 Miles', 'Recovery 3M', 16, 10, 5, None) ,
('10K 42 Miles', '5K Race', 15, 10, 6, '5000') ,
('10K 42 Miles', 'Long 9M', 14, 10, 7, None) ,
('10K 42 Miles', 'Easy 6M - 8x 100m Strides', 12, 11, 2, None) ,
('10K 42 Miles', 'Recovery 4M', 11, 11, 3, None) ,
('10K 42 Miles', 'Interval 8M - 4x 800m 2x 600m', 10, 11, 4, None) ,
('10K 42 Miles', 'Recovery 4M', 8, 11, 6, None) ,
('10K 42 Miles', 'Easy 8M', 7, 11, 7, None) ,
('10K 42 Miles', 'Dress Rehearsal 6M - 4x 100m & 1200m 10K Pace', 6, 12, 1, None) ,
('10K 42 Miles', 'Recovery 3M', 5, 12, 2, None) ,
('10K 42 Miles', 'Recovery 4M', 4, 12, 3, None) ,
('10K 42 Miles', 'Recovery 4M', 2, 12, 5, None) ,
('10K 42 Miles', 'Recovery 3M - 4x 100m Strides', 1, 12, 6, None)
]


def create_db(path):
    """Creates the database in the given path."""
    try:
        return sqlite3.connect(path)
    except Exception as e:
        print('Unable to create database: ', e)


def deploy_database(path):
    """Creates database and deploys objects."""
    try:
        db = create_db(path)
        db.executescript(objects_script)
        db.executemany(sql_vdot_race_times, vdot_race_times)
        db.executemany(sql_vdot_paces, vdot_paces)
        db.executemany(sql_distances, distances)
        db.executemany(sql_run_types, run_types)
        db.executemany(sql_interval_type, interval_type)
        db.execute(sql_settings_temp, temp_settings)
        db.execute(sql_race_times)
        db.execute(sql_default_races)
        db.executemany(sql_workout_temp, workout_templates)
        db.executemany(sql_schedules, schedules)
        db.executemany(sql_schedule_workouts, schedule_workouts)
        db.commit()
    except Exception as e:
        raise e
        print('Unable to create database: ', e)


if __name__ == '__main__':
    #deploy_database('C:\\PythonScripts\\FitnessApp\\FitnessDB.db')

    #test = sqlite3.connect('C:\\PythonScripts\\FitnessApp\\FitnessDB.db')
    test = sqlite3.connect("C:\\Users\\paul.lucas\\AppData\\Roaming\\FitnessApp\\FitnessDB.db", detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES)

    #test.execute(sql_default_races)
    #test.commit()
    #sql = """
    #DROP TABLE Diary;
    #DROP TABLE SchedulePlan;
    #"""
    #test.executescript(sql)
    #test.executemany(sql_schedule_workouts, schedule_workouts)

    #sql = """
    #CREATE TABLE IF NOT EXISTS PlannedSchedule (
    #PlannedScheduleID INTEGER PRIMARY KEY,
    #ScheduleID INT NOT NULL,
    #StartDate DATE NOT NULL,
    #EndDate DATE NOT NULL,
    #FOREIGN KEY(ScheduleID) REFERENCES Schedule(ScheduleID));
#
    #CREATE TABLE IF NOT EXISTS SchedulePlan (
    #SchedulePlanID INTEGER PRIMARY KEY,
    #PlannedScheduleID INT NOT NULL,
    #ScheduleWorkoutID INT NOT NULL,
    #ScheduleDate DATE NOT NULL,
    #RaceDetailID INT NULL,
    #Completed INT NOT NULL,
    #FOREIGN KEY(PlannedScheduleID) REFERENCES PlannedSchedule(PlannedScheduleID),
    #FOREIGN KEY(ScheduleWorkoutID) REFERENCES ScheduleWorkout(ScheduleWorkoutID),
    #FOREIGN KEY(RaceDetailID) REFERENCES RaceDetail(RaceDetailID));
#
    #CREATE TABLE IF NOT EXISTS Diary (
    #DiaryID INTEGER PRIMARY KEY,
    #DiaryDate DATE NOT NULL,
    #DiaryTime DATE NOT NULL,
    #RunTypeID INT,
    #DistanceMiles REAL,
    #DistanceKM REAL,
    #SpeedMPH REAL,
    #SpeedKPH REAL,
    #PaceMiles INT,
    #PaceKM INT,
    #AverageHR INT,
    #ShoeID INT,
    #SchedulePlanID INT,
    #Effort INT,
    #RunRating INT,
    #RaceDetailID INT,
    #IsDeleted INT,
    #CHECK (IsDeleted IN (0,1)),
    #CHECK (Effort BETWEEN 1 AND 10),
    #CHECK (RunRating BETWEEN 1 AND 10),
    #CHECK (AverageHR BETWEEN 1 AND 250),
    #FOREIGN KEY(RunTypeID) REFERENCES RunType(RunTypeID),
    #FOREIGN KEY(SchedulePlanID) REFERENCES SchedulePlan(SchedulePlanID),
    #FOREIGN KEY(ShoeID) REFERENCES Shoe(ShoeID),
    #FOREIGN KEY(RaceDetailID) REFERENCES RaceDetail(RaceDetailID));"""
    #test.executescript(sql)
    #test.commit()

    workouts = """
    SELECT
    ScheduleName,
    Workout.Name,
    DaysFromEnd,
    WorkoutWeek,
    WorkoutWeekDay,
    Distance.*
FROM ScheduleWorkout
INNER JOIN Schedule
    ON ScheduleWorkout.ScheduleID = Schedule.ScheduleID
LEFT JOIN Workout
    ON ScheduleWorkout.WorkoutID = Workout.WorkoutID
LEFT JOIN Distance
    ON ScheduleWorkout.RaceDistanceID = Distance.DistanceID
WHERE Workout.Name IS NULL;"""

    for r in test.cursor().execute(workouts):
        print(r)

    print('CHeck')
    #for r in test.cursor().execute("SELECT * FROM RaceDetail"):
    #    print(r)

    sql = "SELECT VDOT, [{0}] FROM VDOTRaceTimes WHERE time([{0}]) >= time('{1}') ORDER BY VDOT DESC LIMIT 1"

    for v, t in test.cursor().execute(sql.format('HalfMarathon', '01:41:00')):
        print(v, t, '\n')

    print('Schedule Plans\n')

    import pandas
    #print(pandas.read_sql("SELECT * FROM Calendar", test))

    for r in test.cursor().execute("SELECT * FROM Shoe"):
        print(r)

    #cursor = test.cursor()
    #cursor.executemany(update_race_times, details)
    #test.commit()

    update_race_times = """
SELECT
    Name,
    DefaultTarget,
    HRZoneLow,
    HRZoneHigh,
    MilePace,
    KMPace
FROM
    TrainingInterval
UNION ALL
SELECT
    Distance.Name AS Distance,
    'pace' as DefaultTarget,
    NULL AS HRZoneLow,
    NULL AS HRZoneHigh,
    VDOTRacePace.MilePace AS Mile,
    VDOTRacePace.KMPace AS KM
FROM VDOTRacePace
INNER JOIN Distance
    ON VDOTRacePace.DistanceID = Distance.DistanceID;"""


    for r in test.cursor().execute(update_race_times):
        print(r)

    sql = """DELETE FROM RaceDetail;
    DELETE FROM SchedulePlan;
    DELETE FROM PlannedSchedule;"""
    #test.executescript(sql)
    #test.commit()

    sql = """
    DROP VIEW Calendar;
CREATE VIEW Calendar
AS
SELECT
    1 AS ItemPriority,
    'Race' AS ItemType,
    RaceDetailID AS ItemID,
    RaceDate AS ItemDate,
    RaceName AS ItemName,
    GoalTime AS RaceGoal,
    ActualTime AS FinishTime
FROM RaceDetail
INNER JOIN Race
    ON RaceDetail.RaceID = Race.RaceID
UNION ALL
SELECT
    2 AS ItemPriority,
    'Workout' AS ItemType,
    SchedulePlanID AS ItemID,
    SchedulePlan.ScheduleDate AS ItemDate,
    Workout.Name AS ItemName,
    NULL AS GoalTime,
    NULL AS ActualTime
FROM SchedulePlan
INNER JOIN ScheduleWorkout
    ON SchedulePlan.ScheduleWorkoutID = ScheduleWorkout.ScheduleWorkoutID
INNER JOIN Workout
    ON ScheduleWorkout.WorkoutID = Workout.WorkoutID
UNION ALL
SELECT
    3 AS ItemPriority,
    'Diary' AS ItemType,
    DiaryID AS ItemID,
    DiaryDate AS ItemDate,
    RunType.Name AS ItemName,
    NULL AS GoalTime,
    NULL AS ActualTime
FROM Diary
INNER JOIN RunType
    ON Diary.RunTypeID = RunType.RunTypeID;
"""
    #test.executescript(sql)
    #test.commit()

"""
TrainingIntervalID INTEGER PRIMARY KEY,
Name TEXT UNIQUE,
DefaultTarget TEXT,
HRZoneLow INT,
HRZoneHigh INT,
MilePace INT,
KMPace INT
"""


sql = """

CREATE TABLE IF NOT EXISTS ScheduleWorkout (
ScheduleWorkoutID INTEGER PRIMARY KEY,
ScheduleID INT NOT NULL,
WorkoutID INT NULL,
DaysFromEnd INT NOT NULL,
WorkoutWeek INT NOT NULL,
WorkoutWeekDay INT NOT NULL,
RaceDistanceID INT NULL,
FOREIGN KEY(WorkoutID) REFERENCES Workout(WorkoutID),
FOREIGN KEY(ScheduleID) REFERENCES Schedule(ScheduleID),
FOREIGN KEY(RaceDistanceID) REFERENCES Distance(DistanceID));

CREATE TABLE IF NOT EXISTS SchedulePlan (
SchedulePlanID INTEGER PRIMARY KEY,
ScheduleWorkoutID INT NOT NULL,
ScheduleDate DATE NOT NULL,
RaceDetailID INT NULL,
Completed INT NOT NULL,
FOREIGN KEY(ScheduleWorkoutID) REFERENCES ScheduleWorkout(ScheduleWorkoutID),
FOREIGN KEY(RaceDetailID) REFERENCES RaceDetail(RaceDetailID));

CREATE TABLE IF NOT EXISTS Diary (
DiaryID INTEGER PRIMARY KEY,
DiaryDate DATE NOT NULL,
DiaryTime DATE NOT NULL,
RunTypeID INT,
DistanceMiles REAL,
DistanceKM REAL,
SpeedMPH REAL,
SpeedKPH REAL,
PaceMiles INT,
PaceKM INT,
AverageHR INT,
ShoeID INT,
ScheduleWorkoutID INT,
Effort INT,
RunRating INT,
RaceDetailID INT,
IsDeleted INT,
CHECK (IsDeleted IN (0,1)),
CHECK (Effort BETWEEN 1 AND 10),
CHECK (RunRating BETWEEN 1 AND 10),
CHECK (AverageHR BETWEEN 1 AND 250),
FOREIGN KEY(RunTypeID) REFERENCES RunType(RunTypeID),
FOREIGN KEY(ScheduleWorkoutID) REFERENCES ScheduleWorkout(ScheduleWorkoutID),
FOREIGN KEY(ShoeID) REFERENCES Shoe(ShoeID),
FOREIGN KEY(RaceDetailID) REFERENCES RaceDetail(RaceDetailID));
    """